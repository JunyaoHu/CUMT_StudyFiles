///*
// * This file was automatically generated by EvoSuite
// * Tue Jun 07 08:50:06 GMT 2022
// */
//
//package net.mooctest;
//
//import org.junit.Test;
//import static org.junit.Assert.*;
//import static org.evosuite.runtime.EvoAssertions.*;
//import net.mooctest.Node;
//import net.mooctest.RedBlackTree;
//import org.evosuite.runtime.EvoRunner;
//import org.evosuite.runtime.EvoRunnerParameters;
//import org.junit.runner.RunWith;
//
//@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
//public class AbstractBinaryTree_ESTest extends AbstractBinaryTree_ESTest_scaffolding {
//
//  @Test(timeout = 4000)
//  public void test00()  throws Throwable  {
//      RedBlackTree redBlackTree0 = new RedBlackTree();
//      Node node0 = redBlackTree0.insert(4832);
//      Node node1 = redBlackTree0.delete((int) node0.value);
//      node0.parent = redBlackTree0.root;
//      redBlackTree0.createNode((-1433), node0, node1, node1);
//      node1.parent = node0;
//      redBlackTree0.rotateLeft(redBlackTree0.root);
//      redBlackTree0.rotateRight(node1);
//      node1.parent = node0;
//      // Undeclared exception!
//      redBlackTree0.contains((-1433));
//  }
//
//  @Test(timeout = 4000)
//  public void test01()  throws Throwable  {
//      RedBlackTree redBlackTree0 = new RedBlackTree();
//      redBlackTree0.printTreePostOrder();
//      int int0 = 1019;
//      redBlackTree0.printTreeInOrder();
//      redBlackTree0.insert(0);
//      // Undeclared exception!
//      redBlackTree0.insert((-377));
//  }
//
//  @Test(timeout = 4000)
//  public void test02()  throws Throwable  {
//      RedBlackTree redBlackTree0 = new RedBlackTree();
//      assertEquals(0, redBlackTree0.getSize());
//      assertNotNull(redBlackTree0);
//      
//      Node node0 = redBlackTree0.insert(0);
//      redBlackTree0.createNode(0, node0, node0, node0);
//      redBlackTree0.getMaximum(node0);
//      // Undeclared exception!
//      redBlackTree0.getSuccessor((-567));
//  }
//
//  @Test(timeout = 4000)
//  public void test03()  throws Throwable  {
//      RedBlackTree redBlackTree0 = new RedBlackTree();
//      redBlackTree0.delete(2882);
//      redBlackTree0.root = null;
//      Node node0 = redBlackTree0.insert((-584));
//      // Undeclared exception!
//      redBlackTree0.getSuccessor(node0);
//  }
//
//  @Test(timeout = 4000)
//  public void test04()  throws Throwable  {
//      RedBlackTree redBlackTree0 = new RedBlackTree();
//      redBlackTree0.root = null;
//      Node node0 = redBlackTree0.insert((-1));
//      redBlackTree0.search((int) node0.value);
//      // Undeclared exception!
//      redBlackTree0.insert((-1));
//  }
//
//  @Test(timeout = 4000)
//  public void test05()  throws Throwable  {
//      RedBlackTree redBlackTree0 = new RedBlackTree();
//      RedBlackTree redBlackTree1 = new RedBlackTree();
//      Node node0 = redBlackTree1.insert((-1));
//      Node node1 = redBlackTree0.delete(node0);
//      redBlackTree0.createNode((-1), node1, redBlackTree1.root, (Node) null);
//      Integer integer0 = new Integer((-746));
//      RedBlackTree.RedBlackNode redBlackTree_RedBlackNode0 = RedBlackTree.nilNode;
//      Node node2 = new Node(integer0, redBlackTree_RedBlackNode0, redBlackTree0.root, redBlackTree_RedBlackNode0);
//      node2.parent = null;
//      redBlackTree_RedBlackNode0.parent = node2;
//      // Undeclared exception!
//      try { 
//        redBlackTree0.delete(node2);
//        fail("Expecting exception: ClassCastException");
//      
//      } catch(ClassCastException e) {
//         //
//         // net.mooctest.Node cannot be cast to net.mooctest.RedBlackTree$RedBlackNode
//         //
//         verifyException("net.mooctest.RedBlackTree", e);
//      }
//  }
//
//  @Test(timeout = 4000)
//  public void test06()  throws Throwable  {
//      RedBlackTree redBlackTree0 = new RedBlackTree();
//      assertEquals(0, redBlackTree0.getSize());
//      assertNotNull(redBlackTree0);
//      
//      redBlackTree0.printTreePreOrder();
//      assertEquals(0, redBlackTree0.getSize());
//      
//      Node node0 = redBlackTree0.insert(31);
//      assertEquals(1, redBlackTree0.getSize());
//      assertEquals(31, redBlackTree0.getMinimum());
//      assertEquals(31, redBlackTree0.getMaximum());
//      assertFalse(node0.isLeaf());
//      assertNotNull(node0);
//      
//      // Undeclared exception!
//      redBlackTree0.search(969);
//  }
//
//  @Test(timeout = 4000)
//  public void test07()  throws Throwable  {
//      RedBlackTree redBlackTree0 = new RedBlackTree();
//      assertEquals(0, redBlackTree0.getSize());
//      assertNotNull(redBlackTree0);
//      
//      RedBlackTree redBlackTree1 = new RedBlackTree();
//      assertEquals(0, redBlackTree1.getSize());
//      assertNotNull(redBlackTree1);
//      assertFalse(redBlackTree1.equals((Object)redBlackTree0));
//      
//      Node node0 = redBlackTree1.createNode(0, (Node) null, (Node) null, (Node) null);
//      assertEquals(0, redBlackTree1.getSize());
//      assertTrue(node0.isLeaf());
//      assertNotSame(redBlackTree1, redBlackTree0);
//      assertNotNull(node0);
//      assertFalse(redBlackTree1.equals((Object)redBlackTree0));
//      
//      node0.parent = null;
//      assertEquals(0, redBlackTree1.getSize());
//      assertTrue(node0.isLeaf());
//      
//      redBlackTree0.root = node0;
//      assertEquals(0, redBlackTree0.getSize());
//      assertEquals(0, redBlackTree1.getSize());
//      assertTrue(node0.isLeaf());
//      assertTrue(redBlackTree0.root.isLeaf());
//      
//      node0.left = null;
//      assertEquals(0, redBlackTree1.getSize());
//      assertTrue(node0.isLeaf());
//      
//      Node node1 = redBlackTree0.insert(0);
//      assertEquals(0, redBlackTree0.getMaximum());
//      assertEquals(1, redBlackTree0.getSize());
//      assertFalse(node1.isLeaf());
//      assertNotSame(redBlackTree0, redBlackTree1);
//      assertNotSame(node1, node0);
//      assertNotNull(node1);
//      assertFalse(redBlackTree0.equals((Object)redBlackTree1));
//      assertTrue(node1.equals((Object)node0));
//      
//      redBlackTree1.printTreeInOrder();
//      assertEquals(0, redBlackTree1.getSize());
//      assertNotSame(redBlackTree1, redBlackTree0);
//      assertFalse(redBlackTree1.equals((Object)redBlackTree0));
//      
//      Node node2 = redBlackTree1.createNode(0, redBlackTree0.root, node0, node1);
//      assertEquals(0, redBlackTree0.getMaximum());
//      assertEquals(1, redBlackTree0.getSize());
//      assertEquals(0, redBlackTree1.getSize());
//      assertFalse(node0.isLeaf());
//      assertFalse(node1.isLeaf());
//      assertFalse(node2.isLeaf());
//      assertNotSame(redBlackTree0, redBlackTree1);
//      assertNotSame(redBlackTree1, redBlackTree0);
//      assertNotSame(node0, node2);
//      assertNotSame(node0, node1);
//      assertNotSame(node1, node0);
//      assertNotSame(node1, node2);
//      assertNotSame(node2, node1);
//      assertNotSame(node2, node0);
//      assertNotNull(node2);
//      assertFalse(redBlackTree0.equals((Object)redBlackTree1));
//      assertFalse(redBlackTree1.equals((Object)redBlackTree0));
//      assertTrue(node0.equals((Object)node1));
//      assertTrue(node1.equals((Object)node0));
//      assertTrue(node2.equals((Object)node0));
//      assertTrue(node2.equals((Object)node1));
//      
//      // Undeclared exception!
//      try { 
//        redBlackTree1.getSuccessor(0);
//        fail("Expecting exception: NullPointerException");
//      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("net.mooctest.AbstractBinaryTree", e);
//      }
//  }
//
//  @Test(timeout = 4000)
//  public void test08()  throws Throwable  {
//      RedBlackTree redBlackTree0 = new RedBlackTree();
//      assertEquals(0, redBlackTree0.getSize());
//      assertNotNull(redBlackTree0);
//      
//      redBlackTree0.printTreeInOrder();
//      assertEquals(0, redBlackTree0.getSize());
//      
//      RedBlackTree.RedBlackNode redBlackTree_RedBlackNode0 = RedBlackTree.nilNode;
//      assertFalse(redBlackTree_RedBlackNode0.isLeaf());
//      assertNotNull(redBlackTree_RedBlackNode0);
//      
//      redBlackTree_RedBlackNode0.right = (Node) redBlackTree_RedBlackNode0;
//      assertFalse(redBlackTree_RedBlackNode0.isLeaf());
//      assertFalse(redBlackTree_RedBlackNode0.right.isLeaf());
//      
//      Node node0 = redBlackTree0.getMaximum((Node) redBlackTree_RedBlackNode0);
//      assertEquals(0, redBlackTree0.getSize());
//      assertFalse(redBlackTree_RedBlackNode0.isLeaf());
//      assertFalse(node0.isLeaf());
//      assertSame(redBlackTree_RedBlackNode0, node0);
//      assertSame(node0, redBlackTree_RedBlackNode0);
//      assertNotNull(node0);
//      
//      Node node1 = redBlackTree0.createNode(1, node0, redBlackTree_RedBlackNode0, node0);
//      assertEquals(0, redBlackTree0.getSize());
//      assertFalse(redBlackTree_RedBlackNode0.isLeaf());
//      assertFalse(node0.isLeaf());
//      assertFalse(node1.isLeaf());
//      assertNotSame(redBlackTree_RedBlackNode0, node1);
//      assertSame(redBlackTree_RedBlackNode0, node0);
//      assertNotSame(node0, node1);
//      assertSame(node0, redBlackTree_RedBlackNode0);
//      assertNotSame(node1, node0);
//      assertNotSame(node1, redBlackTree_RedBlackNode0);
//      assertNotNull(node1);
//      assertTrue(node1.equals((Object)redBlackTree_RedBlackNode0));
//      assertTrue(node1.equals((Object)node0));
//      
//      // Undeclared exception!
//      redBlackTree0.getSuccessor((Node) redBlackTree_RedBlackNode0);
//  }
//
//  @Test(timeout = 4000)
//  public void test09()  throws Throwable  {
//      RedBlackTree redBlackTree0 = new RedBlackTree();
//      assertEquals(0, redBlackTree0.getSize());
//      assertNotNull(redBlackTree0);
//      
//      Integer integer0 = new Integer(205);
//      assertEquals(205, (int)integer0);
//      assertNotNull(integer0);
//      
//      RedBlackTree.ColorEnum redBlackTree_ColorEnum0 = RedBlackTree.ColorEnum.BLACK;
//      int int0 = Integer.sum(205, 205);
//      assertEquals(410, int0);
//      
//      Node node0 = redBlackTree0.insert(1);
//      assertEquals(1, redBlackTree0.getMinimum());
//      assertEquals(1, redBlackTree0.getMaximum());
//      assertEquals(1, redBlackTree0.getSize());
//      assertFalse(node0.isLeaf());
//      assertNotNull(node0);
//      
//      RedBlackTree.RedBlackNode redBlackTree_RedBlackNode0 = new RedBlackTree.RedBlackNode(integer0, redBlackTree0.root, redBlackTree0.root, redBlackTree0.root, redBlackTree_ColorEnum0);
//      assertEquals(1, redBlackTree0.getMinimum());
//      assertEquals(1, redBlackTree0.getMaximum());
//      assertEquals(1, redBlackTree0.getSize());
//      assertFalse(redBlackTree_RedBlackNode0.isLeaf());
//      assertNotNull(redBlackTree_RedBlackNode0);
//      assertFalse(integer0.equals((Object)int0));
//      assertFalse(redBlackTree_RedBlackNode0.equals((Object)node0));
//      
//      Node node1 = redBlackTree0.getSuccessor((Node) redBlackTree_RedBlackNode0);
//      assertEquals(1, redBlackTree0.getMinimum());
//      assertEquals(1, redBlackTree0.getMaximum());
//      assertEquals(1, redBlackTree0.getSize());
//      assertFalse(redBlackTree_RedBlackNode0.isLeaf());
//      assertFalse(node1.isLeaf());
//      assertNotSame(redBlackTree_RedBlackNode0, node1);
//      assertNotSame(redBlackTree_RedBlackNode0, node0);
//      assertNotSame(node1, redBlackTree_RedBlackNode0);
//      assertSame(node1, node0);
//      assertNotNull(node1);
//      assertFalse(integer0.equals((Object)int0));
//      assertFalse(redBlackTree_RedBlackNode0.equals((Object)node0));
//      assertFalse(node1.equals((Object)redBlackTree_RedBlackNode0));
//      
//      node1.left = (Node) redBlackTree_RedBlackNode0;
//      assertEquals(1, redBlackTree0.getMaximum());
//      assertEquals(1, redBlackTree0.getSize());
//      assertFalse(redBlackTree_RedBlackNode0.isLeaf());
//      assertFalse(node1.isLeaf());
//      assertFalse(node1.left.isLeaf());
//      
//      Node node2 = redBlackTree0.rotateRight(node1);
//      assertEquals(1, redBlackTree0.getMaximum());
//      assertEquals(1, redBlackTree0.getSize());
//      assertFalse(redBlackTree_RedBlackNode0.isLeaf());
//      assertFalse(node1.isLeaf());
//      assertFalse(node2.isLeaf());
//      assertNotSame(redBlackTree_RedBlackNode0, node1);
//      assertSame(redBlackTree_RedBlackNode0, node2);
//      assertNotSame(redBlackTree_RedBlackNode0, node0);
//      assertNotSame(node1, redBlackTree_RedBlackNode0);
//      assertSame(node1, node0);
//      assertNotSame(node1, node2);
//      assertNotSame(node2, node0);
//      assertNotSame(node2, node1);
//      assertSame(node2, redBlackTree_RedBlackNode0);
//      assertNotNull(node2);
//      assertFalse(integer0.equals((Object)int0));
//      assertFalse(redBlackTree_RedBlackNode0.equals((Object)node1));
//      assertFalse(redBlackTree_RedBlackNode0.equals((Object)node0));
//      assertFalse(node1.equals((Object)redBlackTree_RedBlackNode0));
//      assertFalse(node2.equals((Object)node0));
//      assertFalse(node2.equals((Object)node1));
//      
//      Node node3 = redBlackTree0.rotateRight(node2);
//      assertEquals(1, redBlackTree0.getSize());
//      assertFalse(redBlackTree_RedBlackNode0.isLeaf());
//      assertFalse(node1.isLeaf());
//      assertFalse(node2.isLeaf());
//      assertFalse(node3.isLeaf());
//      assertNotSame(redBlackTree_RedBlackNode0, node1);
//      assertSame(redBlackTree_RedBlackNode0, node2);
//      assertNotSame(redBlackTree_RedBlackNode0, node3);
//      assertNotSame(redBlackTree_RedBlackNode0, node0);
//      assertNotSame(node1, redBlackTree_RedBlackNode0);
//      assertSame(node1, node0);
//      assertNotSame(node1, node2);
//      assertSame(node1, node3);
//      assertNotSame(node2, node0);
//      assertNotSame(node2, node1);
//      assertNotSame(node2, node3);
//      assertSame(node2, redBlackTree_RedBlackNode0);
//      assertSame(node3, node0);
//      assertSame(node3, node1);
//      assertNotSame(node3, node2);
//      assertNotSame(node3, redBlackTree_RedBlackNode0);
//      assertNotNull(node3);
//      assertFalse(integer0.equals((Object)int0));
//      assertFalse(redBlackTree_RedBlackNode0.equals((Object)node1));
//      assertFalse(redBlackTree_RedBlackNode0.equals((Object)node0));
//      assertFalse(node1.equals((Object)redBlackTree_RedBlackNode0));
//      assertFalse(node1.equals((Object)node2));
//      assertFalse(node2.equals((Object)node0));
//      assertFalse(node2.equals((Object)node1));
//      assertFalse(node3.equals((Object)node2));
//      assertFalse(node3.equals((Object)redBlackTree_RedBlackNode0));
//      
//      // Undeclared exception!
//      redBlackTree0.getMinimum();
//  }
//
//  @Test(timeout = 4000)
//  public void test10()  throws Throwable  {
//      RedBlackTree redBlackTree0 = new RedBlackTree();
//      assertEquals(0, redBlackTree0.getSize());
//      assertNotNull(redBlackTree0);
//      
//      redBlackTree0.size = 414;
//      assertEquals(414, redBlackTree0.getSize());
//      
//      Integer integer0 = new Integer(414);
//      assertEquals(414, (int)integer0);
//      assertNotNull(integer0);
//      
//      Node node0 = new Node(integer0, (Node) null, (Node) null, (Node) null);
//      assertTrue(node0.isLeaf());
//      assertNotNull(node0);
//      
//      redBlackTree0.printTreeInOrder();
//      assertEquals(414, redBlackTree0.getSize());
//      
//      redBlackTree0.printSubtree(node0);
//      assertEquals(414, redBlackTree0.getSize());
//      assertTrue(node0.isLeaf());
//      
//      Node node1 = redBlackTree0.search(0);
//      assertEquals(414, redBlackTree0.getSize());
//      assertNull(node1);
//      
//      Node node2 = redBlackTree0.getSuccessor(node0);
//      assertEquals(414, redBlackTree0.getSize());
//      assertTrue(node0.isLeaf());
//      assertNull(node2);
//      
//      // Undeclared exception!
//      try { 
//        redBlackTree0.getMinimum();
//        fail("Expecting exception: NullPointerException");
//      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
//  }
//
//  @Test(timeout = 4000)
//  public void test11()  throws Throwable  {
//      RedBlackTree redBlackTree0 = new RedBlackTree();
//      assertEquals(0, redBlackTree0.getSize());
//      assertNotNull(redBlackTree0);
//      
//      int int0 = 1811;
//      Integer integer0 = new Integer((-2240));
//      assertEquals((-2240), (int)integer0);
//      assertNotNull(integer0);
//      assertFalse(integer0.equals((Object)int0));
//      
//      RedBlackTree.ColorEnum redBlackTree_ColorEnum0 = RedBlackTree.ColorEnum.RED;
//      RedBlackTree.RedBlackNode redBlackTree_RedBlackNode0 = new RedBlackTree.RedBlackNode(integer0, (Node) null, (Node) null, (Node) null, redBlackTree_ColorEnum0);
//      assertTrue(redBlackTree_RedBlackNode0.isLeaf());
//      assertNotNull(redBlackTree_RedBlackNode0);
//      assertFalse(integer0.equals((Object)int0));
//      
//      RedBlackTree.RedBlackNode redBlackTree_RedBlackNode1 = RedBlackTree.nilNode;
//      assertFalse(redBlackTree_RedBlackNode1.isLeaf());
//      assertNotSame(redBlackTree_RedBlackNode1, redBlackTree_RedBlackNode0);
//      assertNotNull(redBlackTree_RedBlackNode1);
//      assertFalse(redBlackTree_RedBlackNode1.equals((Object)redBlackTree_RedBlackNode0));
//      
//      Node node0 = new Node(integer0, (Node) null, redBlackTree_RedBlackNode0, redBlackTree_RedBlackNode1);
//      assertTrue(redBlackTree_RedBlackNode0.isLeaf());
//      assertFalse(redBlackTree_RedBlackNode1.isLeaf());
//      assertFalse(node0.isLeaf());
//      assertNotNull(node0);
//      assertFalse(integer0.equals((Object)int0));
//      assertFalse(redBlackTree_RedBlackNode0.equals((Object)redBlackTree_RedBlackNode1));
//      assertFalse(redBlackTree_RedBlackNode1.equals((Object)redBlackTree_RedBlackNode0));
//      
//      // Undeclared exception!
//      try { 
//        redBlackTree0.printTree();
//        fail("Expecting exception: NullPointerException");
//      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("net.mooctest.AbstractBinaryTree", e);
//      }
//  }
//
//  @Test(timeout = 4000)
//  public void test12()  throws Throwable  {
//      RedBlackTree redBlackTree0 = new RedBlackTree();
//      assertEquals(0, redBlackTree0.getSize());
//      assertNotNull(redBlackTree0);
//      
//      Node node0 = redBlackTree0.insert(1);
//      assertEquals(1, redBlackTree0.getMinimum());
//      assertEquals(1, redBlackTree0.getMaximum());
//      assertEquals(1, redBlackTree0.getSize());
//      assertFalse(node0.isLeaf());
//      assertNotNull(node0);
//      
//      int int0 = redBlackTree0.getSize();
//      assertEquals(1, redBlackTree0.getMinimum());
//      assertEquals(1, redBlackTree0.getMaximum());
//      assertEquals(1, redBlackTree0.getSize());
//      assertEquals(1, int0);
//      
//      // Undeclared exception!
//      try { 
//        redBlackTree0.printTreePreOrder();
//        fail("Expecting exception: StackOverflowError");
//      
//      } catch(StackOverflowError e) {
//      }
//  }
//
//  @Test(timeout = 4000)
//  public void test13()  throws Throwable  {
//      RedBlackTree redBlackTree0 = new RedBlackTree();
//      assertEquals(0, redBlackTree0.getSize());
//      assertNotNull(redBlackTree0);
//      
//      Node node0 = redBlackTree0.insert(0);
//      assertEquals(0, redBlackTree0.getMinimum());
//      assertEquals(1, redBlackTree0.getSize());
//      assertEquals(0, redBlackTree0.getMaximum());
//      assertFalse(node0.isLeaf());
//      assertNotNull(node0);
//      
//      // Undeclared exception!
//      redBlackTree0.insert(0);
//  }
//
//  @Test(timeout = 4000)
//  public void test14()  throws Throwable  {
//      RedBlackTree redBlackTree0 = new RedBlackTree();
//      assertEquals(0, redBlackTree0.getSize());
//      assertNotNull(redBlackTree0);
//      
//      Node node0 = redBlackTree0.insert(0);
//      assertEquals(0, redBlackTree0.getMaximum());
//      assertEquals(0, redBlackTree0.getMinimum());
//      assertEquals(1, redBlackTree0.getSize());
//      assertFalse(node0.isLeaf());
//      assertNotNull(node0);
//      
//      // Undeclared exception!
//      redBlackTree0.getSuccessor(node0);
//  }
//
//  @Test(timeout = 4000)
//  public void test15()  throws Throwable  {
//      RedBlackTree redBlackTree0 = new RedBlackTree();
//      assertEquals(0, redBlackTree0.getSize());
//      assertNotNull(redBlackTree0);
//      
//      Node node0 = redBlackTree0.insert(0);
//      assertEquals(0, redBlackTree0.getMinimum());
//      assertEquals(0, redBlackTree0.getMaximum());
//      assertEquals(1, redBlackTree0.getSize());
//      assertFalse(node0.isLeaf());
//      assertNotNull(node0);
//      
//      redBlackTree0.size = 0;
//      assertEquals(0, redBlackTree0.getMinimum());
//      assertEquals(0, redBlackTree0.getMaximum());
//      assertEquals(0, redBlackTree0.getSize());
//      
//      int int0 = redBlackTree0.getSize();
//      assertEquals(0, redBlackTree0.getMinimum());
//      assertEquals(0, redBlackTree0.getMaximum());
//      assertEquals(0, redBlackTree0.getSize());
//      assertEquals(0, int0);
//      
//      Integer integer0 = new Integer(1);
//      assertEquals(1, (int)integer0);
//      assertNotNull(integer0);
//      assertFalse(integer0.equals((Object)int0));
//      
//      node0.value = integer0;
//      assertEquals(1, redBlackTree0.getMinimum());
//      assertEquals(1, redBlackTree0.getMaximum());
//      assertEquals(0, redBlackTree0.getSize());
//      assertFalse(node0.isLeaf());
//      
//      Node node1 = redBlackTree0.delete(node0);
//      assertEquals((-1), redBlackTree0.getSize());
//      assertFalse(node0.isLeaf());
//      assertFalse(node1.isLeaf());
//      assertNotSame(node0, node1);
//      assertNotSame(node1, node0);
//      assertNotNull(node1);
//      assertTrue(node1.equals((Object)node0));
//      
//      boolean boolean0 = redBlackTree0.contains(1);
//      assertEquals((-1), redBlackTree0.getSize());
//      assertTrue(boolean0);
//      
//      Node node2 = redBlackTree0.getMinimum(node0);
//      assertEquals((-1), redBlackTree0.getSize());
//      assertFalse(node0.isLeaf());
//      assertFalse(node2.isLeaf());
//      assertNotSame(node0, node1);
//      assertSame(node0, node2);
//      assertSame(node2, node0);
//      assertNotSame(node2, node1);
//      assertNotNull(node2);
//      assertTrue(node0.equals((Object)node1));
//      assertTrue(node2.equals((Object)node1));
//      
//      redBlackTree0.printSubtree(node0);
//      redBlackTree0.getSize();
//      redBlackTree0.printSubtree(node2);
//      Node node3 = redBlackTree0.createNode(int0, node0, node0, node2);
//      RedBlackTree.RedBlackNode redBlackTree_RedBlackNode0 = RedBlackTree.nilNode;
//      node3.parent = node0;
//      Node node4 = redBlackTree0.rotateLeft(node0);
//      redBlackTree_RedBlackNode0.value = node3.value;
//      node3.right = node4;
//      redBlackTree0.insert((int) redBlackTree_RedBlackNode0.value);
//      redBlackTree0.search((int) redBlackTree_RedBlackNode0.value);
//      int int1 = 0;
//      Node node5 = redBlackTree0.insert(int1);
//      node5.left = redBlackTree0.root;
//      redBlackTree0.printSubtree(node5);
//      redBlackTree0.printSubtree(node5.left);
//      int int2 = (-1);
//      redBlackTree0.insert(int2);
//  }
//
//  @Test(timeout = 4000)
//  public void test16()  throws Throwable  {
//      RedBlackTree redBlackTree0 = new RedBlackTree();
//      assertEquals(0, redBlackTree0.getSize());
//      assertNotNull(redBlackTree0);
//      
//      redBlackTree0.printTreeInOrder();
//      assertEquals(0, redBlackTree0.getSize());
//      
//      RedBlackTree.RedBlackNode redBlackTree_RedBlackNode0 = RedBlackTree.nilNode;
//      assertFalse(redBlackTree_RedBlackNode0.isLeaf());
//      assertNotNull(redBlackTree_RedBlackNode0);
//      
//      RedBlackTree.ColorEnum redBlackTree_ColorEnum0 = RedBlackTree.ColorEnum.BLACK;
//      redBlackTree_RedBlackNode0.color = redBlackTree_ColorEnum0;
//      assertFalse(redBlackTree_RedBlackNode0.isLeaf());
//      
//      Node node0 = redBlackTree0.getMaximum((Node) redBlackTree_RedBlackNode0);
//      Node node1 = redBlackTree0.getMaximum(node0);
//      node1.left = node0;
//      redBlackTree0.printTreePreOrder();
//      redBlackTree0.rotateRight(node1);
//      redBlackTree0.getMaximum((Node) redBlackTree_RedBlackNode0);
//  }
//
//  @Test(timeout = 4000)
//  public void test17()  throws Throwable  {
//      RedBlackTree redBlackTree0 = new RedBlackTree();
//      assertEquals(0, redBlackTree0.getSize());
//      assertNotNull(redBlackTree0);
//      
//      Integer integer0 = new Integer((-114));
//      assertEquals((-114), (int)integer0);
//      assertNotNull(integer0);
//      
//      RedBlackTree.ColorEnum redBlackTree_ColorEnum0 = RedBlackTree.ColorEnum.BLACK;
//      RedBlackTree.RedBlackNode redBlackTree_RedBlackNode0 = new RedBlackTree.RedBlackNode(integer0, (Node) null, (Node) null, (Node) null, redBlackTree_ColorEnum0);
//      assertTrue(redBlackTree_RedBlackNode0.isLeaf());
//      assertNotNull(redBlackTree_RedBlackNode0);
//      
//      // Undeclared exception!
//      try { 
//        redBlackTree0.delete((Node) redBlackTree_RedBlackNode0);
//        fail("Expecting exception: NullPointerException");
//      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
//  }
//
//  @Test(timeout = 4000)
//  public void test18()  throws Throwable  {
//      RedBlackTree redBlackTree0 = new RedBlackTree();
//      assertEquals(0, redBlackTree0.getSize());
//      assertNotNull(redBlackTree0);
//      
//      // Undeclared exception!
//      try { 
//        redBlackTree0.getMinimum();
//        fail("Expecting exception: NullPointerException");
//      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
//  }
//
//  @Test(timeout = 4000)
//  public void test19()  throws Throwable  {
//      RedBlackTree redBlackTree0 = new RedBlackTree();
//      assertEquals(0, redBlackTree0.getSize());
//      assertNotNull(redBlackTree0);
//      
//      RedBlackTree.RedBlackNode redBlackTree_RedBlackNode0 = RedBlackTree.nilNode;
//      assertFalse(redBlackTree_RedBlackNode0.isLeaf());
//      assertNotNull(redBlackTree_RedBlackNode0);
//      
//      Integer integer0 = new Integer((int) redBlackTree_RedBlackNode0.value);
//      assertEquals(1, (int)integer0);
//      assertNotNull(integer0);
//      
//      redBlackTree_RedBlackNode0.value = integer0;
//      assertFalse(redBlackTree_RedBlackNode0.isLeaf());
//      
//      Node node0 = redBlackTree0.getSuccessor((Node) redBlackTree_RedBlackNode0);
//      node0.parent = redBlackTree0.root;
//      Integer integer1 = new Integer((int) redBlackTree_RedBlackNode0.value);
//      node0.value = integer1;
//      node0.parent = redBlackTree0.root;
//      node0.right = (Node) redBlackTree_RedBlackNode0;
//      Node node1 = redBlackTree0.getMaximum(node0);
//      redBlackTree0.printTreePreOrder();
//      Node node2 = redBlackTree0.getMinimum((Node) redBlackTree_RedBlackNode0);
//      node2.value = node0.value;
//      Integer.max((int) node2.value, (int) node1.value);
//      redBlackTree0.getSize();
//      redBlackTree0.delete(node0.right);
//      redBlackTree0.root = node0;
//      int int0 = 0;
//      // Undeclared exception!
//      redBlackTree0.insert(int0);
//  }
//
//  @Test(timeout = 4000)
//  public void test20()  throws Throwable  {
//      RedBlackTree redBlackTree0 = new RedBlackTree();
//      assertEquals(0, redBlackTree0.getSize());
//      assertNotNull(redBlackTree0);
//      
//      Integer integer0 = new Integer((-224));
//      assertEquals((-224), (int)integer0);
//      assertNotNull(integer0);
//      
//      Node node0 = new Node(integer0, (Node) null, (Node) null, (Node) null);
//      assertTrue(node0.isLeaf());
//      assertNotNull(node0);
//      
//      Node node1 = redBlackTree0.getSuccessor(node0);
//      assertEquals(0, redBlackTree0.getSize());
//      assertTrue(node0.isLeaf());
//      assertNull(node1);
//      
//      // Undeclared exception!
//      try { 
//        redBlackTree0.rotateRight((Node) null);
//        fail("Expecting exception: NullPointerException");
//      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("net.mooctest.RedBlackTree", e);
//      }
//  }
//
//  @Test(timeout = 4000)
//  public void test21()  throws Throwable  {
//      RedBlackTree redBlackTree0 = new RedBlackTree();
//      assertEquals(0, redBlackTree0.getSize());
//      assertNotNull(redBlackTree0);
//      
//      redBlackTree0.printTreeInOrder();
//      assertEquals(0, redBlackTree0.getSize());
//      
//      redBlackTree0.printTreePostOrder();
//      assertEquals(0, redBlackTree0.getSize());
//      
//      redBlackTree0.printTreePreOrder();
//      assertEquals(0, redBlackTree0.getSize());
//      
//      redBlackTree0.printTreeInOrder();
//      assertEquals(0, redBlackTree0.getSize());
//      
//      Node node0 = redBlackTree0.delete((-1600));
//      assertEquals(0, redBlackTree0.getSize());
//      assertNull(node0);
//      
//      redBlackTree0.printTreePreOrder();
//      assertEquals(0, redBlackTree0.getSize());
//      
//      // Undeclared exception!
//      try { 
//        redBlackTree0.getMaximum();
//        fail("Expecting exception: NullPointerException");
//      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
//  }
//
//  @Test(timeout = 4000)
//  public void test22()  throws Throwable  {
//      RedBlackTree redBlackTree0 = new RedBlackTree();
//      assertEquals(0, redBlackTree0.getSize());
//      assertNotNull(redBlackTree0);
//      
//      redBlackTree0.printTreePreOrder();
//      assertEquals(0, redBlackTree0.getSize());
//      
//      int int0 = 2561;
//      Node node0 = redBlackTree0.insert(2561);
//      Node node1 = redBlackTree0.getMaximum(node0);
//      node0.left = redBlackTree0.root;
//      node0.right = redBlackTree0.root;
//      node1.right = redBlackTree0.root;
//      int int1 = 0;
//      int int2 = (-1);
//      Integer integer0 = new Integer(int2);
//      node1.value = integer0;
//      // Undeclared exception!
//      redBlackTree0.delete(node0.right);
//  }
//
//  @Test(timeout = 4000)
//  public void test23()  throws Throwable  {
//      RedBlackTree redBlackTree0 = new RedBlackTree();
//      assertEquals(0, redBlackTree0.getSize());
//      assertNotNull(redBlackTree0);
//      
//      RedBlackTree.RedBlackNode redBlackTree_RedBlackNode0 = RedBlackTree.nilNode;
//      assertFalse(redBlackTree_RedBlackNode0.isLeaf());
//      assertNotNull(redBlackTree_RedBlackNode0);
//      
//      RedBlackTree.ColorEnum redBlackTree_ColorEnum0 = RedBlackTree.ColorEnum.RED;
//      redBlackTree_RedBlackNode0.color = redBlackTree_ColorEnum0;
//      assertFalse(redBlackTree_RedBlackNode0.isLeaf());
//      
//      Node node0 = redBlackTree0.getSuccessor((Node) redBlackTree_RedBlackNode0);
//      redBlackTree0.rotateLeft(node0);
//  }
//
//  @Test(timeout = 4000)
//  public void test24()  throws Throwable  {
//      RedBlackTree redBlackTree0 = new RedBlackTree();
//      assertEquals(0, redBlackTree0.getSize());
//      assertNotNull(redBlackTree0);
//      
//      redBlackTree0.printTreePreOrder();
//      assertEquals(0, redBlackTree0.getSize());
//      
//      redBlackTree0.size = 0;
//      assertEquals(0, redBlackTree0.getSize());
//      
//      redBlackTree0.printTreePostOrder();
//      assertEquals(0, redBlackTree0.getSize());
//      
//      Node node0 = redBlackTree0.delete(0);
//      assertEquals(0, redBlackTree0.getSize());
//      assertNull(node0);
//      
//      Node node1 = redBlackTree0.delete((Node) null);
//      assertEquals(0, redBlackTree0.getSize());
//      assertNull(node1);
//  }
//
//  @Test(timeout = 4000)
//  public void test25()  throws Throwable  {
//      RedBlackTree redBlackTree0 = new RedBlackTree();
//      assertEquals(0, redBlackTree0.getSize());
//      assertNotNull(redBlackTree0);
//      
//      int int0 = 0;
//      // Undeclared exception!
//      redBlackTree0.insert(0);
//  }
//
//  @Test(timeout = 4000)
//  public void test26()  throws Throwable  {
//      RedBlackTree redBlackTree0 = new RedBlackTree();
//      assertEquals(0, redBlackTree0.getSize());
//      assertNotNull(redBlackTree0);
//      
//      // Undeclared exception!
//      redBlackTree0.insert(0);
//  }
//
//  @Test(timeout = 4000)
//  public void test27()  throws Throwable  {
//      RedBlackTree redBlackTree0 = new RedBlackTree();
//      assertEquals(0, redBlackTree0.getSize());
//      assertNotNull(redBlackTree0);
//      
//      redBlackTree0.size = 0;
//      assertEquals(0, redBlackTree0.getSize());
//      
//      RedBlackTree.RedBlackNode redBlackTree_RedBlackNode0 = RedBlackTree.nilNode;
//      assertFalse(redBlackTree_RedBlackNode0.isLeaf());
//      assertNotNull(redBlackTree_RedBlackNode0);
//      
//      Node node0 = redBlackTree0.getMinimum((Node) redBlackTree_RedBlackNode0);
//      assertEquals(0, redBlackTree0.getSize());
//      assertFalse(redBlackTree_RedBlackNode0.isLeaf());
//      assertFalse(node0.isLeaf());
//      assertNotSame(redBlackTree_RedBlackNode0, node0);
//      assertNotSame(node0, redBlackTree_RedBlackNode0);
//      assertNotNull(node0);
//      assertTrue(node0.equals((Object)redBlackTree_RedBlackNode0));
//      
//      Node node1 = redBlackTree0.rotateRight(node0);
//      assertEquals(0, redBlackTree0.getSize());
//      assertFalse(redBlackTree_RedBlackNode0.isLeaf());
//      assertFalse(node0.isLeaf());
//      assertFalse(node1.isLeaf());
//      assertSame(redBlackTree_RedBlackNode0, node1);
//      assertNotSame(redBlackTree_RedBlackNode0, node0);
//      assertNotSame(node0, node1);
//      assertNotSame(node0, redBlackTree_RedBlackNode0);
//      assertNotSame(node1, node0);
//      assertSame(node1, redBlackTree_RedBlackNode0);
//      assertNotNull(node1);
//      assertTrue(redBlackTree_RedBlackNode0.equals((Object)node0));
//      assertTrue(node0.equals((Object)redBlackTree_RedBlackNode0));
//      assertTrue(node1.equals((Object)node0));
//      
//      node1.right = node0;
//      assertEquals(0, redBlackTree0.getSize());
//      assertFalse(redBlackTree_RedBlackNode0.isLeaf());
//      assertFalse(node0.isLeaf());
//      assertFalse(node1.isLeaf());
//      assertFalse(node1.right.isLeaf());
//      
//      Node node2 = redBlackTree0.createNode((-1), node1, node1, node0);
//      assertEquals(0, redBlackTree0.getSize());
//      assertFalse(redBlackTree_RedBlackNode0.isLeaf());
//      assertFalse(node0.isLeaf());
//      assertFalse(node1.isLeaf());
//      assertFalse(node2.isLeaf());
//      assertSame(redBlackTree_RedBlackNode0, node1);
//      assertNotSame(redBlackTree_RedBlackNode0, node0);
//      assertNotSame(redBlackTree_RedBlackNode0, node2);
//      assertNotSame(node0, node1);
//      assertNotSame(node0, redBlackTree_RedBlackNode0);
//      assertNotSame(node0, node2);
//      assertNotSame(node1, node0);
//      assertSame(node1, redBlackTree_RedBlackNode0);
//      assertNotSame(node1, node2);
//      assertNotSame(node2, redBlackTree_RedBlackNode0);
//      assertNotSame(node2, node1);
//      assertNotSame(node2, node0);
//      assertNotNull(node2);
//      assertTrue(redBlackTree_RedBlackNode0.equals((Object)node0));
//      assertTrue(node0.equals((Object)node1));
//      assertTrue(node0.equals((Object)redBlackTree_RedBlackNode0));
//      assertTrue(node1.equals((Object)node0));
//      assertFalse(node2.equals((Object)redBlackTree_RedBlackNode0));
//      assertFalse(node2.equals((Object)node1));
//      assertFalse(node2.equals((Object)node0));
//      
//      node1.left = node0;
//      assertEquals(0, redBlackTree0.getSize());
//      assertFalse(redBlackTree_RedBlackNode0.isLeaf());
//      assertFalse(node0.isLeaf());
//      assertFalse(node1.isLeaf());
//      assertFalse(node1.left.isLeaf());
//      
//      redBlackTree0.getMaximum(node1.right);
//  }
//
//  @Test(timeout = 4000)
//  public void test28()  throws Throwable  {
//      RedBlackTree redBlackTree0 = new RedBlackTree();
//      assertEquals(0, redBlackTree0.getSize());
//      assertNotNull(redBlackTree0);
//      
//      // Undeclared exception!
//      redBlackTree0.insert(1757);
//  }
//
//  @Test(timeout = 4000)
//  public void test29()  throws Throwable  {
//      RedBlackTree redBlackTree0 = new RedBlackTree();
//      assertEquals(0, redBlackTree0.getSize());
//      assertNotNull(redBlackTree0);
//      
//      int int0 = 0;
//      redBlackTree0.printTreePostOrder();
//      assertEquals(0, redBlackTree0.getSize());
//      
//      // Undeclared exception!
//      redBlackTree0.insert(0);
//  }
//
//  @Test(timeout = 4000)
//  public void test30()  throws Throwable  {
//      RedBlackTree redBlackTree0 = new RedBlackTree();
//      assertEquals(0, redBlackTree0.getSize());
//      assertNotNull(redBlackTree0);
//      
//      redBlackTree0.size = (-923);
//      assertEquals((-923), redBlackTree0.getSize());
//      
//      Node node0 = redBlackTree0.search((-923));
//      assertEquals((-923), redBlackTree0.getSize());
//      assertNull(node0);
//      
//      Node node1 = redBlackTree0.delete((Node) null);
//      assertEquals((-923), redBlackTree0.getSize());
//      assertNull(node1);
//      
//      // Undeclared exception!
//      redBlackTree0.insert(4832);
//  }
//
//  @Test(timeout = 4000)
//  public void test31()  throws Throwable  {
//      RedBlackTree redBlackTree0 = new RedBlackTree();
//      assertEquals(0, redBlackTree0.getSize());
//      assertNotNull(redBlackTree0);
//      
//      // Undeclared exception!
//      redBlackTree0.insert(0);
//  }
//
//  @Test(timeout = 4000)
//  public void test32()  throws Throwable  {
//      RedBlackTree redBlackTree0 = new RedBlackTree();
//      assertEquals(0, redBlackTree0.getSize());
//      assertNotNull(redBlackTree0);
//      
//      // Undeclared exception!
//      try { 
//        redBlackTree0.getSuccessor(0);
//        fail("Expecting exception: NullPointerException");
//      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("net.mooctest.AbstractBinaryTree", e);
//      }
//  }
//
//  @Test(timeout = 4000)
//  public void test33()  throws Throwable  {
//      RedBlackTree redBlackTree0 = new RedBlackTree();
//      assertEquals(0, redBlackTree0.getSize());
//      assertNotNull(redBlackTree0);
//      
//      // Undeclared exception!
//      redBlackTree0.insert(0);
//  }
//
//  @Test(timeout = 4000)
//  public void test34()  throws Throwable  {
//      RedBlackTree redBlackTree0 = new RedBlackTree();
//      assertEquals(0, redBlackTree0.getSize());
//      assertNotNull(redBlackTree0);
//      
//      // Undeclared exception!
//      try { 
//        redBlackTree0.getMaximum();
//        fail("Expecting exception: NullPointerException");
//      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
//  }
//
//  @Test(timeout = 4000)
//  public void test35()  throws Throwable  {
//      RedBlackTree redBlackTree0 = new RedBlackTree();
//      assertEquals(0, redBlackTree0.getSize());
//      assertNotNull(redBlackTree0);
//      
//      Node node0 = redBlackTree0.search(2);
//      assertEquals(0, redBlackTree0.getSize());
//      assertNull(node0);
//      
//      // Undeclared exception!
//      try { 
//        redBlackTree0.getMinimum((Node) null);
//        fail("Expecting exception: NullPointerException");
//      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
//  }
//
//  @Test(timeout = 4000)
//  public void test36()  throws Throwable  {
//      RedBlackTree redBlackTree0 = new RedBlackTree();
//      assertEquals(0, redBlackTree0.getSize());
//      assertNotNull(redBlackTree0);
//      
//      // Undeclared exception!
//      redBlackTree0.insert(0);
//  }
//
//  @Test(timeout = 4000)
//  public void test37()  throws Throwable  {
//      RedBlackTree redBlackTree0 = new RedBlackTree();
//      assertEquals(0, redBlackTree0.getSize());
//      assertNotNull(redBlackTree0);
//      
//      // Undeclared exception!
//      redBlackTree0.insert((-6));
//  }
//
//  @Test(timeout = 4000)
//  public void test38()  throws Throwable  {
//      RedBlackTree redBlackTree0 = new RedBlackTree();
//      assertEquals(0, redBlackTree0.getSize());
//      assertNotNull(redBlackTree0);
//      
//      int int0 = 2;
//      // Undeclared exception!
//      redBlackTree0.insert(2);
//  }
//
//  @Test(timeout = 4000)
//  public void test39()  throws Throwable  {
//      RedBlackTree redBlackTree0 = new RedBlackTree();
//      assertEquals(0, redBlackTree0.getSize());
//      assertNotNull(redBlackTree0);
//      
//      RedBlackTree.RedBlackNode redBlackTree_RedBlackNode0 = RedBlackTree.nilNode;
//      assertFalse(redBlackTree_RedBlackNode0.isLeaf());
//      assertNotNull(redBlackTree_RedBlackNode0);
//      
//      RedBlackTree.RedBlackNode redBlackTree_RedBlackNode1 = RedBlackTree.nilNode;
//      assertFalse(redBlackTree_RedBlackNode1.isLeaf());
//      assertSame(redBlackTree_RedBlackNode1, redBlackTree_RedBlackNode0);
//      assertNotNull(redBlackTree_RedBlackNode1);
//      
//      Node node0 = redBlackTree0.createNode(0, (Node) null, redBlackTree_RedBlackNode0, redBlackTree_RedBlackNode1);
//      assertEquals(0, redBlackTree0.getSize());
//      assertFalse(redBlackTree_RedBlackNode0.isLeaf());
//      assertFalse(redBlackTree_RedBlackNode1.isLeaf());
//      assertFalse(node0.isLeaf());
//      assertNotSame(redBlackTree_RedBlackNode0, node0);
//      assertSame(redBlackTree_RedBlackNode0, redBlackTree_RedBlackNode1);
//      assertSame(redBlackTree_RedBlackNode1, redBlackTree_RedBlackNode0);
//      assertNotSame(redBlackTree_RedBlackNode1, node0);
//      assertNotSame(node0, redBlackTree_RedBlackNode0);
//      assertNotSame(node0, redBlackTree_RedBlackNode1);
//      assertNotNull(node0);
//      assertFalse(node0.equals((Object)redBlackTree_RedBlackNode0));
//      assertFalse(node0.equals((Object)redBlackTree_RedBlackNode1));
//      
//      redBlackTree0.search((int) redBlackTree_RedBlackNode0.value);
//      Node node1 = redBlackTree0.createNode(698, redBlackTree_RedBlackNode1, node0, redBlackTree_RedBlackNode1);
//      redBlackTree0.printSubtree(node1);
//      int int0 = 0;
//      redBlackTree0.search(int0);
//  }
//
//  @Test(timeout = 4000)
//  public void test40()  throws Throwable  {
//      RedBlackTree redBlackTree0 = new RedBlackTree();
//      redBlackTree0.root = null;
//      // Undeclared exception!
//      redBlackTree0.insert((-1));
//  }
//
//  @Test(timeout = 4000)
//  public void test41()  throws Throwable  {
//      RedBlackTree redBlackTree0 = new RedBlackTree();
//      redBlackTree0.printTreePostOrder();
//      int int0 = 1019;
//      redBlackTree0.printTreeInOrder();
//      // Undeclared exception!
//      redBlackTree0.insert(0);
//  }
//
//  @Test(timeout = 4000)
//  public void test42()  throws Throwable  {
//      RedBlackTree redBlackTree0 = new RedBlackTree();
//      redBlackTree0.printTreePreOrder();
//      Node node0 = null;
//      Node node1 = redBlackTree0.createNode((-923), (Node) null, (Node) null, (Node) null);
//      redBlackTree0.root = node1;
//      redBlackTree0.delete(1);
//      redBlackTree0.size = 1;
//      redBlackTree0.printTree();
//      redBlackTree0.printTreePostOrder();
//      redBlackTree0.search(0);
//      // Undeclared exception!
//      try { 
//        redBlackTree0.printSubtree((Node) null);
//        fail("Expecting exception: NullPointerException");
//      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("net.mooctest.AbstractBinaryTree", e);
//      }
//  }
//
//  @Test(timeout = 4000)
//  public void test43()  throws Throwable  {
//      RedBlackTree redBlackTree0 = new RedBlackTree();
//      boolean boolean0 = redBlackTree0.contains(31);
//      assertFalse(boolean0);
//  }
//
//  @Test(timeout = 4000)
//  public void test44()  throws Throwable  {
//      RedBlackTree redBlackTree0 = new RedBlackTree();
//      // Undeclared exception!
//      redBlackTree0.insert(4832);
//  }
//
//  @Test(timeout = 4000)
//  public void test45()  throws Throwable  {
//      RedBlackTree redBlackTree0 = new RedBlackTree();
//      int int0 = (-585);
//      // Undeclared exception!
//      redBlackTree0.insert(2044);
//  }
//
//  @Test(timeout = 4000)
//  public void test46()  throws Throwable  {
//      RedBlackTree redBlackTree0 = new RedBlackTree();
//      RedBlackTree.RedBlackNode redBlackTree_RedBlackNode0 = RedBlackTree.nilNode;
//      redBlackTree0.printSubtree(redBlackTree_RedBlackNode0);
//      redBlackTree0.printTree();
//      redBlackTree_RedBlackNode0.left = redBlackTree0.root;
//      redBlackTree_RedBlackNode0.right = redBlackTree0.root;
//      int int0 = 0;
//      Node node0 = redBlackTree0.delete(int0);
//      redBlackTree0.printTreePreOrder();
//      redBlackTree0.printTreePostOrder();
//      int int1 = (-4371);
//      Integer integer0 = new Integer(int1);
//      redBlackTree_RedBlackNode0.right.value = integer0;
//      redBlackTree0.root = redBlackTree_RedBlackNode0.right;
//      Node node1 = redBlackTree0.getMinimum((Node) redBlackTree_RedBlackNode0);
//      redBlackTree0.printTree();
//      int int2 = 1;
//      Node node2 = redBlackTree0.insert(int2);
//      node1.left = node2;
//      Node node3 = redBlackTree0.insert((int) redBlackTree_RedBlackNode0.value);
//      Node node4 = redBlackTree0.delete(redBlackTree_RedBlackNode0.right);
//      redBlackTree_RedBlackNode0.right.left = node1;
//      int int3 = 0;
//      node2.parent = node0;
//      redBlackTree0.size = int3;
//      redBlackTree0.insert(int3);
//      Node node5 = redBlackTree0.rotateRight(redBlackTree_RedBlackNode0.right);
//      redBlackTree0.getMinimum(node5);
//      redBlackTree0.getSize();
//      Node node6 = redBlackTree0.delete(node3);
//      redBlackTree0.printTreePostOrder();
//      redBlackTree0.delete((int) node6.value);
//      redBlackTree0.createNode((int) node3.value, node4, node3, node0);
//  }
//
//  @Test(timeout = 4000)
//  public void test47()  throws Throwable  {
//      RedBlackTree redBlackTree0 = new RedBlackTree();
//      Integer integer0 = new Integer(1787);
//      // Undeclared exception!
//      redBlackTree0.insert(0);
//  }
//}
