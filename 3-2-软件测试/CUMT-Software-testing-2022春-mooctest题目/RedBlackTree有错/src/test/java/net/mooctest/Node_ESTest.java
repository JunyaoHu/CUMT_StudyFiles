///*
// * This file was automatically generated by EvoSuite
// * Tue Jun 07 08:51:36 GMT 2022
// */
//
//package net.mooctest;
//
//import org.junit.Test;
//import static org.junit.Assert.*;
//import net.mooctest.Node;
//import org.evosuite.runtime.EvoRunner;
//import org.evosuite.runtime.EvoRunnerParameters;
//import org.junit.runner.RunWith;
//
//@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
//public class Node_ESTest extends Node_ESTest_scaffolding {
//
//  @Test(timeout = 4000)
//  public void test00()  throws Throwable  {
//      Integer integer0 = new Integer(0);
//      Node node0 = new Node(integer0, (Node) null, (Node) null, (Node) null);
//      Node node1 = new Node(integer0, node0, (Node) null, (Node) null);
//      boolean boolean0 = node1.isLeaf();
//      assertTrue(boolean0);
//  }
//
//  @Test(timeout = 4000)
//  public void test01()  throws Throwable  {
//      Integer integer0 = new Integer(216);
//      Node node0 = new Node(integer0, (Node) null, (Node) null, (Node) null);
//      Node node1 = new Node(node0.value, node0, node0, node0);
//      Integer integer1 = new Integer((-28));
//      node1.value = integer1;
//      boolean boolean0 = node0.equals(node1);
//      assertFalse(node1.equals((Object)node0));
//      assertFalse(boolean0);
//  }
//
//  @Test(timeout = 4000)
//  public void test02()  throws Throwable  {
//      Node node0 = new Node((Integer) null, (Node) null, (Node) null, (Node) null);
//      Node node1 = new Node((Integer) null, (Node) null, (Node) null, (Node) null);
//      boolean boolean0 = node0.equals(node1);
//      assertTrue(node1.isLeaf());
//      assertTrue(boolean0);
//  }
//
//  @Test(timeout = 4000)
//  public void test03()  throws Throwable  {
//      Integer integer0 = new Integer((-22));
//      Node node0 = new Node(integer0, (Node) null, (Node) null, (Node) null);
//      node0.value = null;
//      Node node1 = new Node(integer0, node0, node0, node0);
//      boolean boolean0 = node0.equals(node1);
//      assertTrue(node0.isLeaf());
//      assertFalse(boolean0);
//      assertFalse(node1.equals((Object)node0));
//  }
//
//  @Test(timeout = 4000)
//  public void test04()  throws Throwable  {
//      Integer integer0 = new Integer(1);
//      Node node0 = new Node(integer0, (Node) null, (Node) null, (Node) null);
//      Node node1 = new Node(integer0, node0, (Node) null, node0);
//      boolean boolean0 = node0.equals(node1);
//      assertTrue(node0.isLeaf());
//      assertFalse(node1.isLeaf());
//      assertTrue(boolean0);
//  }
//
//  @Test(timeout = 4000)
//  public void test05()  throws Throwable  {
//      Node node0 = new Node((Integer) null, (Node) null, (Node) null, (Node) null);
//      boolean boolean0 = node0.equals((Object) null);
//      assertTrue(node0.isLeaf());
//      assertFalse(boolean0);
//  }
//
//  @Test(timeout = 4000)
//  public void test06()  throws Throwable  {
//      Integer integer0 = new Integer(1);
//      Node node0 = new Node(integer0, (Node) null, (Node) null, (Node) null);
//      boolean boolean0 = node0.equals(node0);
//      assertTrue(boolean0);
//      assertTrue(node0.isLeaf());
//  }
//
//  @Test(timeout = 4000)
//  public void test07()  throws Throwable  {
//      Integer integer0 = new Integer(1);
//      Node node0 = new Node(integer0, (Node) null, (Node) null, (Node) null);
//      boolean boolean0 = node0.equals(integer0);
//      assertFalse(boolean0);
//      assertTrue(node0.isLeaf());
//  }
//
//  @Test(timeout = 4000)
//  public void test08()  throws Throwable  {
//      Integer integer0 = new Integer(1);
//      Node node0 = new Node(integer0, (Node) null, (Node) null, (Node) null);
//      node0.hashCode();
//      assertTrue(node0.isLeaf());
//  }
//
//  @Test(timeout = 4000)
//  public void test09()  throws Throwable  {
//      Integer integer0 = new Integer(1);
//      Node node0 = new Node(integer0, (Node) null, (Node) null, (Node) null);
//      Node node1 = new Node(integer0, node0, (Node) null, node0);
//      boolean boolean0 = node1.isLeaf();
//      assertFalse(boolean0);
//      assertTrue(node0.isLeaf());
//  }
//
//  @Test(timeout = 4000)
//  public void test10()  throws Throwable  {
//      Integer integer0 = new Integer(216);
//      Node node0 = new Node(integer0, (Node) null, (Node) null, (Node) null);
//      Node node1 = new Node(node0.value, node0, node0, node0);
//      boolean boolean0 = node1.isLeaf();
//      assertFalse(boolean0);
//      assertTrue(node0.isLeaf());
//  }
//
//  @Test(timeout = 4000)
//  public void test11()  throws Throwable  {
//      Integer integer0 = new Integer((-22));
//      Node node0 = new Node(integer0, (Node) null, (Node) null, (Node) null);
//      node0.value = null;
//      node0.hashCode();
//      assertTrue(node0.isLeaf());
//  }
//}
