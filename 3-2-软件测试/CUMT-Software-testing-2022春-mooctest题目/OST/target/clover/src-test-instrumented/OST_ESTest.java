/* $$ This file has been instrumented by Clover 4.4.1#2019101123313948 $$ *////*
// * This file was automatically generated by EvoSuite
// * Tue Jun 07 03:23:07 GMT 2022
// */
//
//package net.mooctest;
//
//import org.junit.Test;
//import static org.junit.Assert.*;
//import static org.evosuite.shaded.org.mockito.Mockito.*;
//import static org.evosuite.runtime.EvoAssertions.*;
//import java.util.Collection;
//import java.util.HashSet;
//import java.util.Iterator;
//import java.util.LinkedList;
//import net.mooctest.OST;
//import org.evosuite.runtime.EvoRunner;
//import org.evosuite.runtime.EvoRunnerParameters;
//import org.evosuite.runtime.ViolatedAssumptionAnswer;
//import org.junit.runner.RunWith;
//
//@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
//public class OST_ESTest extends OST_ESTest_scaffolding {
//
//  @Test(timeout = 4000)
//  public void test00()  throws Throwable  {
//      OST<Comparable<Object>> oST0 = new OST<Comparable<Object>>();
//      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
//      oST0.add(comparable0);
//      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
//      doReturn((-1), 4696).when(comparable1).compareTo(any());
//      oST0.add(comparable1);
//      boolean boolean0 = oST0.isHealthy();
//      assertTrue(boolean0);
//  }
//
//  @Test(timeout = 4000)
//  public void test01()  throws Throwable  {
//      OST<Integer> oST0 = new OST<Integer>();
//      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
//      Integer integer0 = new Integer((-3002));
//      Integer integer1 = new Integer((-2));
//      linkedList0.add(integer1);
//      Integer integer2 = new Integer(Integer.MIN_VALUE);
//      linkedList0.add(integer2);
//      Integer integer3 = new Integer((-3051));
//      linkedList0.add(integer3);
//      Integer integer4 = new Integer((-904));
//      linkedList0.add(integer4);
//      linkedList0.add(integer0);
//      boolean boolean0 = oST0.addAll(linkedList0);
//      assertEquals(5, oST0.size());
//      assertTrue(boolean0);
//  }
//
//  @Test(timeout = 4000)
//  public void test02()  throws Throwable  {
//      OST<Integer> oST0 = new OST<Integer>();
//      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
//      Integer integer0 = new Integer((-2996));
//      Integer integer1 = new Integer(2147483642);
//      linkedList0.add(integer1);
//      Integer integer2 = new Integer(593);
//      linkedList0.add(integer2);
//      Integer integer3 = new Integer(830);
//      linkedList0.add(integer3);
//      Integer integer4 = new Integer((-904));
//      linkedList0.add(integer4);
//      linkedList0.add(integer0);
//      boolean boolean0 = oST0.addAll(linkedList0);
//      assertEquals(5, oST0.size());
//      assertTrue(boolean0);
//  }
//
//  @Test(timeout = 4000)
//  public void test03()  throws Throwable  {
//      OST<Integer> oST0 = new OST<Integer>();
//      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
//      Integer integer0 = new Integer((-3002));
//      Integer integer1 = Integer.getInteger("net.mooctest.OST$Node", (-3051));
//      Integer integer2 = new Integer(Integer.MIN_VALUE);
//      linkedList0.add(integer2);
//      Integer integer3 = new Integer(830);
//      linkedList0.add(integer3);
//      Integer integer4 = new Integer((-904));
//      linkedList0.add(integer4);
//      linkedList0.add(integer1);
//      linkedList0.add(integer0);
//      oST0.addAll(linkedList0);
//      boolean boolean0 = oST0.removeAll(linkedList0);
//      assertTrue(oST0.isEmpty());
//      assertTrue(boolean0);
//  }
//
//  @Test(timeout = 4000)
//  public void test04()  throws Throwable  {
//      OST<Integer> oST0 = new OST<Integer>();
//      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
//      Integer integer0 = new Integer((-3002));
//      Integer integer1 = new Integer(2);
//      linkedList0.add(integer1);
//      Integer integer2 = new Integer(830);
//      linkedList0.add(integer2);
//      Integer integer3 = new Integer((-904));
//      oST0.add(integer3);
//      Integer integer4 = new Integer((-3051));
//      linkedList0.add(integer4);
//      linkedList0.add(integer0);
//      oST0.addAll(linkedList0);
//      boolean boolean0 = oST0.retainAll(linkedList0);
//      assertFalse(oST0.isEmpty());
//      assertTrue(boolean0);
//  }
//
//  @Test(timeout = 4000)
//  public void test05()  throws Throwable  {
//      OST<Comparable<Object>> oST0 = new OST<Comparable<Object>>();
//      // Undeclared exception!
//      try { 
//        oST0.get(0);
//        fail("Expecting exception: IndexOutOfBoundsException");
//      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // The input index is too large: 0, the size of this tree is 0
//         //
//         verifyException("net.mooctest.OST", e);
//      }
//  }
//
//  @Test(timeout = 4000)
//  public void test06()  throws Throwable  {
//      OST<Comparable<Object>> oST0 = new OST<Comparable<Object>>();
//      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
//      oST0.add(comparable0);
//      oST0.clear();
//      assertTrue(oST0.isEmpty());
//  }
//
//  @Test(timeout = 4000)
//  public void test07()  throws Throwable  {
//      OST<Integer> oST0 = new OST<Integer>();
//      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
//      Integer integer0 = new Integer((-3002));
//      Integer integer1 = Integer.getInteger("net.mooctest.OST$Node", (-3051));
//      Integer integer2 = new Integer(Integer.MIN_VALUE);
//      linkedList0.add(integer2);
//      linkedList0.add(integer1);
//      Integer integer3 = new Integer(830);
//      linkedList0.add(integer3);
//      linkedList0.add(integer0);
//      oST0.addAll(linkedList0);
//      int int0 = oST0.indexOf(integer3);
//      assertEquals(4, oST0.size());
//      assertEquals(3, int0);
//  }
//
//  @Test(timeout = 4000)
//  public void test08()  throws Throwable  {
//      OST<Integer> oST0 = new OST<Integer>();
//      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
//      Integer integer0 = new Integer((-3002));
//      linkedList0.add(integer0);
//      Integer integer1 = new Integer(830);
//      linkedList0.add(integer1);
//      Integer integer2 = new Integer(3252);
//      linkedList0.add(integer2);
//      Integer integer3 = new Integer((-3051));
//      linkedList0.add(integer3);
//      oST0.addAll(linkedList0);
//      int int0 = oST0.indexOf(integer0);
//      assertEquals(4, oST0.size());
//      assertEquals(1, int0);
//  }
//
//  @Test(timeout = 4000)
//  public void test09()  throws Throwable  {
//      OST<Comparable<Object>> oST0 = new OST<Comparable<Object>>();
//      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
//      oST0.add(comparable0);
//      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
//      doReturn((-1), 0).when(comparable1).compareTo(any());
//      boolean boolean0 = oST0.add(comparable1);
//      assertEquals(2, oST0.size());
//      assertTrue(boolean0);
//  }
//
//  @Test(timeout = 4000)
//  public void test10()  throws Throwable  {
//      OST<Integer> oST0 = new OST<Integer>();
//      Integer integer0 = Integer.getInteger("Removing the same element twice.", 1);
//      oST0.add(integer0);
//      int int0 = oST0.size();
//      assertEquals(1, int0);
//  }
//
//  @Test(timeout = 4000)
//  public void test11()  throws Throwable  {
//      OST<Comparable<Object>> oST0 = new OST<Comparable<Object>>();
//      HashSet<Object> hashSet0 = new HashSet<Object>();
//      boolean boolean0 = oST0.retainAll(hashSet0);
//      assertFalse(boolean0);
//  }
//
//  @Test(timeout = 4000)
//  public void test12()  throws Throwable  {
//      OST<Comparable<Object>> oST0 = new OST<Comparable<Object>>();
//      Iterator<Comparable<Object>> iterator0 = oST0.iterator();
//      assertNotNull(iterator0);
//  }
//
//  @Test(timeout = 4000)
//  public void test13()  throws Throwable  {
//      OST<Integer> oST0 = new OST<Integer>();
//      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
//      Integer integer0 = new Integer((-3002));
//      linkedList0.add(integer0);
//      boolean boolean0 = oST0.addAll(linkedList0);
//      boolean boolean1 = oST0.contains(integer0);
//      assertTrue(boolean1 == boolean0);
//      assertTrue(boolean1);
//  }
//
//  @Test(timeout = 4000)
//  public void test14()  throws Throwable  {
//      OST<Integer> oST0 = new OST<Integer>();
//      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
//      boolean boolean0 = oST0.addAll(linkedList0);
//      assertFalse(boolean0);
//  }
//
//  @Test(timeout = 4000)
//  public void test15()  throws Throwable  {
//      OST<Comparable<Object>> oST0 = new OST<Comparable<Object>>();
//      // Undeclared exception!
//      try { 
//        oST0.toArray((Object[]) null);
//        fail("Expecting exception: NullPointerException");
//      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("net.mooctest.OST", e);
//      }
//  }
//
//  @Test(timeout = 4000)
//  public void test16()  throws Throwable  {
//      OST<Comparable<Object>> oST0 = new OST<Comparable<Object>>();
//      // Undeclared exception!
//      try { 
//        oST0.retainAll((Collection<?>) null);
//        fail("Expecting exception: NullPointerException");
//      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("net.mooctest.OST", e);
//      }
//  }
//
//  @Test(timeout = 4000)
//  public void test17()  throws Throwable  {
//      OST<Integer> oST0 = new OST<Integer>();
//      // Undeclared exception!
//      try { 
//        oST0.removeAll((Collection<?>) null);
//        fail("Expecting exception: NullPointerException");
//      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("net.mooctest.OST", e);
//      }
//  }
//
//  @Test(timeout = 4000)
//  public void test18()  throws Throwable  {
//      OST<Comparable<Object>> oST0 = new OST<Comparable<Object>>();
//      HashSet<Object> hashSet0 = new HashSet<Object>();
//      hashSet0.add(oST0);
//      // Undeclared exception!
//      try { 
//        oST0.removeAll(hashSet0);
//        fail("Expecting exception: ClassCastException");
//      
//      } catch(ClassCastException e) {
//         //
//         // net.mooctest.OST cannot be cast to java.lang.Comparable
//         //
//         verifyException("net.mooctest.OST", e);
//      }
//  }
//
//  @Test(timeout = 4000)
//  public void test19()  throws Throwable  {
//      OST<Comparable<Object>> oST0 = new OST<Comparable<Object>>();
//      // Undeclared exception!
//      try { 
//        oST0.remove(oST0);
//        fail("Expecting exception: ClassCastException");
//      
//      } catch(ClassCastException e) {
//         //
//         // net.mooctest.OST cannot be cast to java.lang.Comparable
//         //
//         verifyException("net.mooctest.OST", e);
//      }
//  }
//
//  @Test(timeout = 4000)
//  public void test20()  throws Throwable  {
//      OST<Comparable<Object>> oST0 = new OST<Comparable<Object>>();
//      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
//      oST0.add(comparable0);
//      // Undeclared exception!
//      try { 
//        oST0.indexOf((Comparable<Object>) null);
//        fail("Expecting exception: NullPointerException");
//      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("net.mooctest.OST", e);
//      }
//  }
//
//  @Test(timeout = 4000)
//  public void test21()  throws Throwable  {
//      OST<Integer> oST0 = new OST<Integer>();
//      // Undeclared exception!
//      try { 
//        oST0.containsAll((Collection<?>) null);
//        fail("Expecting exception: NullPointerException");
//      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("net.mooctest.OST", e);
//      }
//  }
//
//  @Test(timeout = 4000)
//  public void test22()  throws Throwable  {
//      OST<Comparable<Object>> oST0 = new OST<Comparable<Object>>();
//      HashSet<Object> hashSet0 = new HashSet<Object>();
//      hashSet0.add(oST0);
//      // Undeclared exception!
//      try { 
//        oST0.containsAll(hashSet0);
//        fail("Expecting exception: ClassCastException");
//      
//      } catch(ClassCastException e) {
//         //
//         // net.mooctest.OST cannot be cast to java.lang.Comparable
//         //
//         verifyException("net.mooctest.OST", e);
//      }
//  }
//
//  @Test(timeout = 4000)
//  public void test23()  throws Throwable  {
//      OST<Integer> oST0 = new OST<Integer>();
//      Integer integer0 = Integer.getInteger("Removing the same element twice.", 1);
//      oST0.add(integer0);
//      // Undeclared exception!
//      try { 
//        oST0.contains((Object) null);
//        fail("Expecting exception: NullPointerException");
//      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
//  }
//
//  @Test(timeout = 4000)
//  public void test24()  throws Throwable  {
//      OST<Comparable<Object>> oST0 = new OST<Comparable<Object>>();
//      // Undeclared exception!
//      try { 
//        oST0.contains(oST0);
//        fail("Expecting exception: ClassCastException");
//      
//      } catch(ClassCastException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//      }
//  }
//
//  @Test(timeout = 4000)
//  public void test25()  throws Throwable  {
//      OST<Integer> oST0 = new OST<Integer>();
//      // Undeclared exception!
//      try { 
//        oST0.addAll((Collection<? extends Integer>) null);
//        fail("Expecting exception: NullPointerException");
//      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("net.mooctest.OST", e);
//      }
//  }
//
//  @Test(timeout = 4000)
//  public void test26()  throws Throwable  {
//      OST<Integer> oST0 = new OST<Integer>();
//      // Undeclared exception!
//      try { 
//        oST0.add((Integer) null);
//        fail("Expecting exception: NullPointerException");
//      
//      } catch(NullPointerException e) {
//         //
//         // The input element is null.
//         //
//         verifyException("java.util.Objects", e);
//      }
//  }
//
//  @Test(timeout = 4000)
//  public void test27()  throws Throwable  {
//      OST<Integer> oST0 = new OST<Integer>();
//      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
//      Integer integer0 = new Integer(2147483644);
//      Integer integer1 = new Integer(830);
//      linkedList0.add(integer1);
//      oST0.addAll(linkedList0);
//      boolean boolean0 = oST0.remove(integer0);
//      assertFalse(oST0.isEmpty());
//      assertFalse(boolean0);
//  }
//
//  @Test(timeout = 4000)
//  public void test28()  throws Throwable  {
//      OST<Integer> oST0 = new OST<Integer>();
//      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
//      Integer integer0 = new Integer((-3002));
//      linkedList0.add(integer0);
//      oST0.addAll(linkedList0);
//      assertEquals(1, oST0.size());
//      
//      boolean boolean0 = oST0.remove(integer0);
//      assertTrue(boolean0);
//  }
//
//  @Test(timeout = 4000)
//  public void test29()  throws Throwable  {
//      OST<Integer> oST0 = new OST<Integer>();
//      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
//      Integer integer0 = new Integer((-3002));
//      Integer integer1 = new Integer(Integer.MIN_VALUE);
//      linkedList0.add(integer0);
//      oST0.addAll(linkedList0);
//      boolean boolean0 = oST0.remove(integer1);
//      assertFalse(oST0.isEmpty());
//      assertFalse(boolean0);
//  }
//
//  @Test(timeout = 4000)
//  public void test30()  throws Throwable  {
//      OST<Integer> oST0 = new OST<Integer>();
//      Integer integer0 = new Integer(2498);
//      oST0.add(integer0);
//      // Undeclared exception!
//      try { 
//        oST0.remove((Object) null);
//        fail("Expecting exception: NullPointerException");
//      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("net.mooctest.OST", e);
//      }
//  }
//
//  @Test(timeout = 4000)
//  public void test31()  throws Throwable  {
//      OST<Comparable<Object>> oST0 = new OST<Comparable<Object>>();
//      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
//      doReturn((-2819), (-2819)).when(comparable0).compareTo(any());
//      doReturn("").when(comparable0).toString();
//      oST0.add(comparable0);
//      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
//      doReturn((-2819), (-2819), 0).when(comparable1).compareTo(any());
//      doReturn("").when(comparable1).toString();
//      oST0.add(comparable1);
//      HashSet<Object> hashSet0 = new HashSet<Object>();
//      hashSet0.addAll(oST0);
//      boolean boolean0 = hashSet0.removeAll(oST0);
//      assertFalse(hashSet0.isEmpty());
//      assertTrue(boolean0);
//  }
//
//  @Test(timeout = 4000)
//  public void test32()  throws Throwable  {
//      OST<Comparable<Object>> oST0 = new OST<Comparable<Object>>();
//      HashSet<Comparable<Object>> hashSet0 = new HashSet<Comparable<Object>>();
//      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
//      hashSet0.add(comparable0);
//      oST0.addAll(hashSet0);
//      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
//      doReturn(0).when(comparable1).compareTo(any());
//      boolean boolean0 = oST0.add(comparable1);
//      assertEquals(1, oST0.size());
//      assertFalse(boolean0);
//  }
//
//  @Test(timeout = 4000)
//  public void test33()  throws Throwable  {
//      OST<Comparable<Object>> oST0 = new OST<Comparable<Object>>();
//      boolean boolean0 = oST0.isHealthy();
//      assertTrue(boolean0);
//  }
//
//  @Test(timeout = 4000)
//  public void test34()  throws Throwable  {
//      OST<Integer> oST0 = new OST<Integer>();
//      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
//      Integer integer0 = new Integer((-3002));
//      Integer integer1 = new Integer(Integer.MIN_VALUE);
//      linkedList0.add(integer1);
//      Integer integer2 = new Integer((-3051));
//      linkedList0.add(integer2);
//      Integer integer3 = new Integer((-904));
//      linkedList0.add(integer3);
//      linkedList0.add(integer0);
//      oST0.addAll(linkedList0);
//      assertFalse(oST0.isEmpty());
//      
//      boolean boolean0 = oST0.removeAll(linkedList0);
//      assertTrue(boolean0);
//  }
//
//  @Test(timeout = 4000)
//  public void test35()  throws Throwable  {
//      OST<Integer> oST0 = new OST<Integer>();
//      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
//      Integer integer0 = new Integer((-3002));
//      Integer integer1 = Integer.getInteger("net.mooctest.OST$Node", (-3051));
//      linkedList0.add(integer0);
//      Integer integer2 = new Integer(Integer.MIN_VALUE);
//      linkedList0.add(integer2);
//      linkedList0.add(integer1);
//      Integer integer3 = new Integer(830);
//      linkedList0.add(integer3);
//      oST0.addAll(linkedList0);
//      Integer integer4 = new Integer(24);
//      boolean boolean0 = oST0.add(integer4);
//      assertEquals(5, oST0.size());
//      assertTrue(boolean0);
//  }
//
//  @Test(timeout = 4000)
//  public void test36()  throws Throwable  {
//      OST<Integer> oST0 = new OST<Integer>();
//      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
//      Integer integer0 = new Integer(2);
//      Integer integer1 = new Integer(830);
//      linkedList0.add(integer1);
//      Integer integer2 = new Integer((-904));
//      linkedList0.add(integer2);
//      Integer integer3 = new Integer(473);
//      linkedList0.add(integer3);
//      Integer integer4 = new Integer(Integer.MIN_VALUE);
//      linkedList0.add(integer4);
//      linkedList0.add(integer0);
//      oST0.addAll(linkedList0);
//      assertEquals(5, oST0.size());
//      
//      boolean boolean0 = oST0.removeAll(linkedList0);
//      assertTrue(boolean0);
//  }
//
//  @Test(timeout = 4000)
//  public void test37()  throws Throwable  {
//      OST<Integer> oST0 = new OST<Integer>();
//      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
//      Integer integer0 = new Integer((-2996));
//      Integer integer1 = new Integer(Integer.MIN_VALUE);
//      linkedList0.add(integer1);
//      Integer integer2 = new Integer(593);
//      linkedList0.add(integer2);
//      Integer integer3 = new Integer(830);
//      linkedList0.add(integer3);
//      Integer integer4 = new Integer((-904));
//      linkedList0.add(integer4);
//      Integer integer5 = new Integer((-3051));
//      linkedList0.add(integer5);
//      linkedList0.add(integer0);
//      boolean boolean0 = oST0.addAll(linkedList0);
//      assertEquals(6, oST0.size());
//      assertTrue(boolean0);
//  }
//
//  @Test(timeout = 4000)
//  public void test38()  throws Throwable  {
//      OST<Integer> oST0 = new OST<Integer>();
//      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
//      Integer integer0 = new Integer((-3002));
//      linkedList0.add(integer0);
//      Integer integer1 = new Integer(Integer.MIN_VALUE);
//      linkedList0.add(integer1);
//      Integer integer2 = new Integer((-3051));
//      Integer integer3 = new Integer((-904));
//      linkedList0.add(integer3);
//      oST0.add(integer2);
//      oST0.addAll(linkedList0);
//      boolean boolean0 = oST0.retainAll(linkedList0);
//      assertFalse(oST0.contains((-3051)));
//      assertTrue(boolean0);
//  }
//
//  @Test(timeout = 4000)
//  public void test39()  throws Throwable  {
//      OST<Integer> oST0 = new OST<Integer>();
//      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
//      Integer integer0 = new Integer((-3002));
//      Integer integer1 = new Integer(Integer.MIN_VALUE);
//      linkedList0.add(integer1);
//      Integer integer2 = new Integer(830);
//      linkedList0.add(integer2);
//      Integer integer3 = new Integer((-904));
//      linkedList0.add(integer3);
//      linkedList0.add(integer0);
//      oST0.addAll(linkedList0);
//      assertEquals(4, oST0.size());
//      
//      boolean boolean0 = oST0.removeAll(linkedList0);
//      assertTrue(boolean0);
//  }
//
//  @Test(timeout = 4000)
//  public void test40()  throws Throwable  {
//      OST<Integer> oST0 = new OST<Integer>();
//      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
//      Integer integer0 = new Integer(2);
//      Integer integer1 = new Integer(830);
//      linkedList0.add(integer1);
//      Integer integer2 = new Integer((-904));
//      linkedList0.add(integer2);
//      Integer integer3 = new Integer(Integer.MIN_VALUE);
//      linkedList0.add(integer3);
//      linkedList0.add(integer0);
//      oST0.addAll(linkedList0);
//      assertFalse(oST0.isEmpty());
//      
//      boolean boolean0 = oST0.removeAll(linkedList0);
//      assertTrue(boolean0);
//  }
//
//  @Test(timeout = 4000)
//  public void test41()  throws Throwable  {
//      OST<Comparable<Object>> oST0 = new OST<Comparable<Object>>();
//      // Undeclared exception!
//      try { 
//        oST0.get(7);
//        fail("Expecting exception: IndexOutOfBoundsException");
//      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // The input index is too large: 7, the size of this tree is 0
//         //
//         verifyException("net.mooctest.OST", e);
//      }
//  }
//
//  @Test(timeout = 4000)
//  public void test42()  throws Throwable  {
//      OST<Integer> oST0 = new OST<Integer>();
//      // Undeclared exception!
//      try { 
//        oST0.get((-3002));
//        fail("Expecting exception: IndexOutOfBoundsException");
//      
//      } catch(IndexOutOfBoundsException e) {
//         //
//         // The input index is negative: -3002
//         //
//         verifyException("net.mooctest.OST", e);
//      }
//  }
//
//  @Test(timeout = 4000)
//  public void test43()  throws Throwable  {
//      OST<Integer> oST0 = new OST<Integer>();
//      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
//      Integer integer0 = new Integer((-3002));
//      Integer integer1 = Integer.getInteger("net.mooctest.OST$Node", (-3051));
//      Integer integer2 = new Integer(Integer.MIN_VALUE);
//      linkedList0.add(integer2);
//      linkedList0.add(integer1);
//      Integer integer3 = new Integer(830);
//      linkedList0.add(integer3);
//      linkedList0.add(integer0);
//      oST0.addAll(linkedList0);
//      oST0.toArray();
//      assertEquals(4, oST0.size());
//  }
//
//  @Test(timeout = 4000)
//  public void test44()  throws Throwable  {
//      OST<Integer> oST0 = new OST<Integer>();
//      boolean boolean0 = oST0.isEmpty();
//      assertTrue(boolean0);
//  }
//
//  @Test(timeout = 4000)
//  public void test45()  throws Throwable  {
//      OST<Integer> oST0 = new OST<Integer>();
//      assertTrue(oST0.isEmpty());
//      
//      Integer integer0 = new Integer((-3002));
//      oST0.add(integer0);
//      boolean boolean0 = oST0.isEmpty();
//      assertFalse(boolean0);
//  }
//
//  @Test(timeout = 4000)
//  public void test46()  throws Throwable  {
//      OST<Integer> oST0 = new OST<Integer>();
//      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
//      Integer integer0 = new Integer((-3002));
//      Integer integer1 = new Integer((-3718));
//      linkedList0.add(integer1);
//      linkedList0.add(integer0);
//      oST0.addAll(linkedList0);
//      int int0 = oST0.indexOf(integer0);
//      assertFalse(oST0.isEmpty());
//      assertEquals(1, int0);
//  }
//
//  @Test(timeout = 4000)
//  public void test47()  throws Throwable  {
//      OST<Integer> oST0 = new OST<Integer>();
//      Integer integer0 = new Integer((-3002));
//      Integer integer1 = new Integer(Integer.MIN_VALUE);
//      boolean boolean0 = oST0.add(integer1);
//      assertTrue(boolean0);
//      
//      int int0 = oST0.indexOf(integer0);
//      assertEquals((-1), int0);
//  }
//
//  @Test(timeout = 4000)
//  public void test48()  throws Throwable  {
//      OST<Integer> oST0 = new OST<Integer>();
//      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
//      Integer integer0 = new Integer((-3002));
//      linkedList0.add(integer0);
//      Integer integer1 = new Integer(Integer.MIN_VALUE);
//      linkedList0.add(integer1);
//      oST0.addAll(linkedList0);
//      int int0 = oST0.indexOf(integer1);
//      assertFalse(oST0.isEmpty());
//      assertEquals(0, int0);
//  }
//
//  @Test(timeout = 4000)
//  public void test49()  throws Throwable  {
//      OST<Integer> oST0 = new OST<Integer>();
//      Integer integer0 = new Integer((-3002));
//      int int0 = oST0.indexOf(integer0);
//      assertEquals((-1), int0);
//  }
//
//  @Test(timeout = 4000)
//  public void test50()  throws Throwable  {
//      OST<Comparable<Object>> oST0 = new OST<Comparable<Object>>();
//      HashSet<Comparable<Object>> hashSet0 = new HashSet<Comparable<Object>>();
//      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
//      hashSet0.add(comparable0);
//      oST0.addAll(hashSet0);
//      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
//      doReturn((-1433)).when(comparable1).compareTo(any());
//      int int0 = oST0.indexOf(comparable1);
//      assertEquals(1, oST0.size());
//      assertEquals((-1), int0);
//  }
//
//  @Test(timeout = 4000)
//  public void test51()  throws Throwable  {
//      OST<Comparable<Object>> oST0 = new OST<Comparable<Object>>();
//      HashSet<Comparable<Object>> hashSet0 = new HashSet<Comparable<Object>>();
//      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
//      hashSet0.add(comparable0);
//      oST0.addAll(hashSet0);
//      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
//      doReturn((-1), (-1)).when(comparable1).compareTo(any());
//      doReturn("").when(comparable1).toString();
//      oST0.add(comparable1);
//      oST0.get(0);
//      assertEquals(2, oST0.size());
//  }
//
//  @Test(timeout = 4000)
//  public void test52()  throws Throwable  {
//      OST<Comparable<Object>> oST0 = new OST<Comparable<Object>>();
//      HashSet<Comparable<Object>> hashSet0 = new HashSet<Comparable<Object>>();
//      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
//      hashSet0.add(comparable0);
//      oST0.addAll(hashSet0);
//      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
//      doReturn(1, 1).when(comparable1).compareTo(any());
//      doReturn("").when(comparable1).toString();
//      oST0.add(comparable1);
//      assertEquals(2, oST0.size());
//      
//      Comparable<Object> comparable2 = oST0.get(1);
//      assertSame(comparable2, comparable1);
//  }
//
//  @Test(timeout = 4000)
//  public void test53()  throws Throwable  {
//      OST<Integer> oST0 = new OST<Integer>();
//      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
//      Integer integer0 = new Integer(830);
//      linkedList0.add(integer0);
//      linkedList0.add(integer0);
//      Integer integer1 = new Integer(473);
//      linkedList0.add(integer1);
//      oST0.addAll(linkedList0);
//      assertFalse(oST0.isEmpty());
//      
//      boolean boolean0 = oST0.removeAll(linkedList0);
//      assertTrue(boolean0);
//  }
//
//  @Test(timeout = 4000)
//  public void test54()  throws Throwable  {
//      OST<Integer> oST0 = new OST<Integer>();
//      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
//      Integer integer0 = new Integer((-3002));
//      Integer integer1 = new Integer(Integer.MIN_VALUE);
//      linkedList0.add(integer1);
//      oST0.addAll(linkedList0);
//      boolean boolean0 = oST0.contains(integer0);
//      assertEquals(1, oST0.size());
//      assertFalse(boolean0);
//  }
//
//  @Test(timeout = 4000)
//  public void test55()  throws Throwable  {
//      OST<Integer> oST0 = new OST<Integer>();
//      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
//      Integer integer0 = new Integer((-3002));
//      linkedList0.add(integer0);
//      boolean boolean0 = oST0.removeAll(linkedList0);
//      assertFalse(boolean0);
//  }
//
//  @Test(timeout = 4000)
//  public void test56()  throws Throwable  {
//      OST<Comparable<Object>> oST0 = new OST<Comparable<Object>>();
//      HashSet<Comparable<Object>> hashSet0 = new HashSet<Comparable<Object>>();
//      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
//      doReturn(0).when(comparable0).compareTo(any());
//      hashSet0.add(comparable0);
//      oST0.addAll(hashSet0);
//      boolean boolean0 = oST0.containsAll(hashSet0);
//      assertEquals(1, oST0.size());
//      assertTrue(boolean0);
//  }
//
//  @Test(timeout = 4000)
//  public void test57()  throws Throwable  {
//      OST<Comparable<Object>> oST0 = new OST<Comparable<Object>>();
//      HashSet<Comparable<Object>> hashSet0 = new HashSet<Comparable<Object>>();
//      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
//      hashSet0.add(comparable0);
//      boolean boolean0 = oST0.containsAll(hashSet0);
//      assertFalse(boolean0);
//  }
//
//  @Test(timeout = 4000)
//  public void test58()  throws Throwable  {
//      OST<Integer> oST0 = new OST<Integer>();
//      Integer integer0 = Integer.getInteger("Removing the same element twice.", 1);
//      oST0.add(integer0);
//      assertEquals(1, oST0.size());
//      
//      Object[] objectArray0 = oST0.toArray();
//      OST<Comparable<Object>> oST1 = new OST<Comparable<Object>>();
//      oST1.toArray(objectArray0);
//      assertEquals(1, objectArray0.length);
//  }
//
//  @Test(timeout = 4000)
//  public void test59()  throws Throwable  {
//      OST<Comparable<Object>> oST0 = new OST<Comparable<Object>>();
//      HashSet<Comparable<Object>> hashSet0 = new HashSet<Comparable<Object>>();
//      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
//      doReturn("").when(comparable0).toString();
//      hashSet0.add(comparable0);
//      oST0.addAll(hashSet0);
//      Integer[] integerArray0 = new Integer[0];
//      // Undeclared exception!
//      try { 
//        oST0.toArray(integerArray0);
//        fail("Expecting exception: ArrayStoreException");
//      
//      } catch(ArrayStoreException e) {
//         //
//         // codegen.java.lang.Comparable$MockitoMock$276334007
//         //
//         verifyException("net.mooctest.OST", e);
//      }
//  }
//
//  @Test(timeout = 4000)
//  public void test60()  throws Throwable  {
//      OST<Integer> oST0 = new OST<Integer>();
//      int int0 = oST0.size();
//      assertEquals(0, int0);
//  }
//
//  @Test(timeout = 4000)
//  public void test61()  throws Throwable  {
//      OST<Integer> oST0 = new OST<Integer>();
//      Object[] objectArray0 = oST0.toArray();
//      OST<Comparable<Object>> oST1 = new OST<Comparable<Object>>();
//      Object[] objectArray1 = oST1.toArray(objectArray0);
//      assertSame(objectArray1, objectArray0);
//      assertEquals(0, objectArray1.length);
//  }
//}
