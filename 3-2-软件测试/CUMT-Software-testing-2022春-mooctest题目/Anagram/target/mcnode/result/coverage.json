[{"nodeName":"method-1-Anagram(String)","category":"openclover-method","ifCatch":true},{"nodeName":"branch-1-Anagram(String)","category":"openclover-branch","ifCatch":true},{"nodeName":"branch-2-Anagram(String)","category":"openclover-branch","ifCatch":true},{"nodeName":"statement-1-Anagram(String)","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-2-Anagram(String)","category":"openclover-statement","ifCatch":true},{"nodeName":"method-2-Anagram(int,String)","category":"openclover-method","ifCatch":true},{"nodeName":"statement-3-Anagram(int,String)","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-4-Anagram(int,String)","category":"openclover-statement","ifCatch":true},{"nodeName":"method-3-findAllAnagrams(String) : Set<Set<String>>","category":"openclover-method","ifCatch":true},{"nodeName":"statement-5-findAllAnagrams(String) : Set<Set<String>>","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-6-findAllAnagrams(String) : Set<Set<String>>","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-7-findAllAnagrams(String) : Set<Set<String>>","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-8-findAllAnagrams(String) : Set<Set<String>>","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-9-findAllAnagrams(String) : Set<Set<String>>","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-10-findAllAnagrams(String) : Set<Set<String>>","category":"openclover-statement","ifCatch":true},{"nodeName":"branch-3-findAllAnagrams(String) : Set<Set<String>>","category":"openclover-branch","ifCatch":true},{"nodeName":"branch-4-findAllAnagrams(String) : Set<Set<String>>","category":"openclover-branch","ifCatch":true},{"nodeName":"statement-11-findAllAnagrams(String) : Set<Set<String>>","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-12-findAllAnagrams(String) : Set<Set<String>>","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-13-findAllAnagrams(String) : Set<Set<String>>","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-14-findAllAnagrams(String) : Set<Set<String>>","category":"openclover-statement","ifCatch":true},{"nodeName":"branch-5-findAllAnagrams(String) : Set<Set<String>>","category":"openclover-branch","ifCatch":true},{"nodeName":"branch-6-findAllAnagrams(String) : Set<Set<String>>","category":"openclover-branch","ifCatch":true},{"nodeName":"statement-15-findAllAnagrams(String) : Set<Set<String>>","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-16-findAllAnagrams(String) : Set<Set<String>>","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-17-findAllAnagrams(String) : Set<Set<String>>","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-18-findAllAnagrams(String) : Set<Set<String>>","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-19-findAllAnagrams(String) : Set<Set<String>>","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-20-findAllAnagrams(String) : Set<Set<String>>","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-21-findAllAnagrams(String) : Set<Set<String>>","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-22-findAllAnagrams(String) : Set<Set<String>>","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-23-findAllAnagrams(String) : Set<Set<String>>","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-24-findAllAnagrams(String) : Set<Set<String>>","category":"openclover-statement","ifCatch":true},{"nodeName":"method-4-findAnagrams(int,char[],List<String>) : Set<Set<String>>","category":"openclover-method","ifCatch":true},{"nodeName":"statement-25-findAnagrams(int,char[],List<String>) : Set<Set<String>>","category":"openclover-statement","ifCatch":true},{"nodeName":"branch-7-findAnagrams(int,char[],List<String>) : Set<Set<String>>","category":"openclover-branch","ifCatch":false},{"nodeName":"branch-8-findAnagrams(int,char[],List<String>) : Set<Set<String>>","category":"openclover-branch","ifCatch":true},{"nodeName":"statement-26-findAnagrams(int,char[],List<String>) : Set<Set<String>>","category":"openclover-statement","ifCatch":false},{"nodeName":"statement-27-findAnagrams(int,char[],List<String>) : Set<Set<String>>","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-28-findAnagrams(int,char[],List<String>) : Set<Set<String>>","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-29-findAnagrams(int,char[],List<String>) : Set<Set<String>>","category":"openclover-statement","ifCatch":true},{"nodeName":"branch-9-findAnagrams(int,char[],List<String>) : Set<Set<String>>","category":"openclover-branch","ifCatch":true},{"nodeName":"branch-10-findAnagrams(int,char[],List<String>) : Set<Set<String>>","category":"openclover-branch","ifCatch":true},{"nodeName":"statement-30-findAnagrams(int,char[],List<String>) : Set<Set<String>>","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-31-findAnagrams(int,char[],List<String>) : Set<Set<String>>","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-32-findAnagrams(int,char[],List<String>) : Set<Set<String>>","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-33-findAnagrams(int,char[],List<String>) : Set<Set<String>>","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-34-findAnagrams(int,char[],List<String>) : Set<Set<String>>","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-35-findAnagrams(int,char[],List<String>) : Set<Set<String>>","category":"openclover-statement","ifCatch":true},{"nodeName":"branch-11-findAnagrams(int,char[],List<String>) : Set<Set<String>>","category":"openclover-branch","ifCatch":true},{"nodeName":"branch-12-findAnagrams(int,char[],List<String>) : Set<Set<String>>","category":"openclover-branch","ifCatch":false},{"nodeName":"statement-36-findAnagrams(int,char[],List<String>) : Set<Set<String>>","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-37-findAnagrams(int,char[],List<String>) : Set<Set<String>>","category":"openclover-statement","ifCatch":true},{"nodeName":"branch-13-findAnagrams(int,char[],List<String>) : Set<Set<String>>","category":"openclover-branch","ifCatch":true},{"nodeName":"branch-14-findAnagrams(int,char[],List<String>) : Set<Set<String>>","category":"openclover-branch","ifCatch":false},{"nodeName":"statement-38-findAnagrams(int,char[],List<String>) : Set<Set<String>>","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-39-findAnagrams(int,char[],List<String>) : Set<Set<String>>","category":"openclover-statement","ifCatch":true},{"nodeName":"branch-15-findAnagrams(int,char[],List<String>) : Set<Set<String>>","category":"openclover-branch","ifCatch":false},{"nodeName":"branch-16-findAnagrams(int,char[],List<String>) : Set<Set<String>>","category":"openclover-branch","ifCatch":true},{"nodeName":"statement-40-findAnagrams(int,char[],List<String>) : Set<Set<String>>","category":"openclover-statement","ifCatch":false},{"nodeName":"statement-41-findAnagrams(int,char[],List<String>) : Set<Set<String>>","category":"openclover-statement","ifCatch":false},{"nodeName":"branch-17-findAnagrams(int,char[],List<String>) : Set<Set<String>>","category":"openclover-branch","ifCatch":false},{"nodeName":"branch-18-findAnagrams(int,char[],List<String>) : Set<Set<String>>","category":"openclover-branch","ifCatch":false},{"nodeName":"statement-42-findAnagrams(int,char[],List<String>) : Set<Set<String>>","category":"openclover-statement","ifCatch":false},{"nodeName":"statement-43-findAnagrams(int,char[],List<String>) : Set<Set<String>>","category":"openclover-statement","ifCatch":false},{"nodeName":"statement-44-findAnagrams(int,char[],List<String>) : Set<Set<String>>","category":"openclover-statement","ifCatch":true},{"nodeName":"branch-19-findAnagrams(int,char[],List<String>) : Set<Set<String>>","category":"openclover-branch","ifCatch":true},{"nodeName":"branch-20-findAnagrams(int,char[],List<String>) : Set<Set<String>>","category":"openclover-branch","ifCatch":false},{"nodeName":"statement-45-findAnagrams(int,char[],List<String>) : Set<Set<String>>","category":"openclover-statement","ifCatch":false},{"nodeName":"method-5-mergeAnagramKeyWords(Set<String>) : Set<Set<String>>","category":"openclover-method","ifCatch":true},{"nodeName":"statement-46-mergeAnagramKeyWords(Set<String>) : Set<Set<String>>","category":"openclover-statement","ifCatch":true},{"nodeName":"branch-21-mergeAnagramKeyWords(Set<String>) : Set<Set<String>>","category":"openclover-branch","ifCatch":false},{"nodeName":"branch-22-mergeAnagramKeyWords(Set<String>) : Set<Set<String>>","category":"openclover-branch","ifCatch":true},{"nodeName":"statement-47-mergeAnagramKeyWords(Set<String>) : Set<Set<String>>","category":"openclover-statement","ifCatch":false},{"nodeName":"statement-48-mergeAnagramKeyWords(Set<String>) : Set<Set<String>>","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-49-mergeAnagramKeyWords(Set<String>) : Set<Set<String>>","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-50-mergeAnagramKeyWords(Set<String>) : Set<Set<String>>","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-51-mergeAnagramKeyWords(Set<String>) : Set<Set<String>>","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-52-mergeAnagramKeyWords(Set<String>) : Set<Set<String>>","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-53-mergeAnagramKeyWords(Set<String>) : Set<Set<String>>","category":"openclover-statement","ifCatch":true},{"nodeName":"method-6-mergeWordToSets(String,Set<Set<String>>) : Set<Set<String>>","category":"openclover-method","ifCatch":false},{"nodeName":"branch-23-mergeWordToSets(String,Set<Set<String>>) : Set<Set<String>>","category":"openclover-branch","ifCatch":false},{"nodeName":"branch-24-mergeWordToSets(String,Set<Set<String>>) : Set<Set<String>>","category":"openclover-branch","ifCatch":false},{"nodeName":"statement-54-mergeWordToSets(String,Set<Set<String>>) : Set<Set<String>>","category":"openclover-statement","ifCatch":false},{"nodeName":"branch-25-mergeWordToSets(String,Set<Set<String>>) : Set<Set<String>>","category":"openclover-branch","ifCatch":false},{"nodeName":"branch-26-mergeWordToSets(String,Set<Set<String>>) : Set<Set<String>>","category":"openclover-branch","ifCatch":false},{"nodeName":"statement-55-mergeWordToSets(String,Set<Set<String>>) : Set<Set<String>>","category":"openclover-statement","ifCatch":false},{"nodeName":"statement-56-mergeWordToSets(String,Set<Set<String>>) : Set<Set<String>>","category":"openclover-statement","ifCatch":false},{"nodeName":"statement-57-mergeWordToSets(String,Set<Set<String>>) : Set<Set<String>>","category":"openclover-statement","ifCatch":false},{"nodeName":"statement-58-mergeWordToSets(String,Set<Set<String>>) : Set<Set<String>>","category":"openclover-statement","ifCatch":false},{"nodeName":"branch-27-mergeWordToSets(String,Set<Set<String>>) : Set<Set<String>>","category":"openclover-branch","ifCatch":false},{"nodeName":"branch-28-mergeWordToSets(String,Set<Set<String>>) : Set<Set<String>>","category":"openclover-branch","ifCatch":false},{"nodeName":"statement-59-mergeWordToSets(String,Set<Set<String>>) : Set<Set<String>>","category":"openclover-statement","ifCatch":false},{"nodeName":"statement-60-mergeWordToSets(String,Set<Set<String>>) : Set<Set<String>>","category":"openclover-statement","ifCatch":false},{"nodeName":"statement-61-mergeWordToSets(String,Set<Set<String>>) : Set<Set<String>>","category":"openclover-statement","ifCatch":false},{"nodeName":"statement-62-mergeWordToSets(String,Set<Set<String>>) : Set<Set<String>>","category":"openclover-statement","ifCatch":false},{"nodeName":"method-7-usage() : void","category":"openclover-method","ifCatch":false},{"nodeName":"statement-63-usage() : void","category":"openclover-statement","ifCatch":false},{"nodeName":"statement-64-usage() : void","category":"openclover-statement","ifCatch":false},{"nodeName":"statement-65-usage() : void","category":"openclover-statement","ifCatch":false},{"nodeName":"method-8-loadDictionary(String) : void","category":"openclover-method","ifCatch":true},{"nodeName":"statement-66-loadDictionary(String) : void","category":"openclover-statement","ifCatch":true},{"nodeName":"method-9-loadDictionaryWithSubsets(String,String,int) : void","category":"openclover-method","ifCatch":true},{"nodeName":"statement-67-loadDictionaryWithSubsets(String,String,int) : void","category":"openclover-statement","ifCatch":true},{"nodeName":"branch-29-loadDictionaryWithSubsets(String,String,int) : void","category":"openclover-branch","ifCatch":true},{"nodeName":"branch-30-loadDictionaryWithSubsets(String,String,int) : void","category":"openclover-branch","ifCatch":true},{"nodeName":"statement-68-loadDictionaryWithSubsets(String,String,int) : void","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-69-loadDictionaryWithSubsets(String,String,int) : void","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-70-loadDictionaryWithSubsets(String,String,int) : void","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-71-loadDictionaryWithSubsets(String,String,int) : void","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-72-loadDictionaryWithSubsets(String,String,int) : void","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-73-loadDictionaryWithSubsets(String,String,int) : void","category":"openclover-statement","ifCatch":true},{"nodeName":"branch-31-loadDictionaryWithSubsets(String,String,int) : void","category":"openclover-branch","ifCatch":false},{"nodeName":"branch-32-loadDictionaryWithSubsets(String,String,int) : void","category":"openclover-branch","ifCatch":false},{"nodeName":"branch-33-loadDictionaryWithSubsets(String,String,int) : void","category":"openclover-branch","ifCatch":true},{"nodeName":"branch-34-loadDictionaryWithSubsets(String,String,int) : void","category":"openclover-branch","ifCatch":false},{"nodeName":"statement-74-loadDictionaryWithSubsets(String,String,int) : void","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-75-loadDictionaryWithSubsets(String,String,int) : void","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-76-loadDictionaryWithSubsets(String,String,int) : void","category":"openclover-statement","ifCatch":true},{"nodeName":"branch-35-loadDictionaryWithSubsets(String,String,int) : void","category":"openclover-branch","ifCatch":false},{"nodeName":"branch-36-loadDictionaryWithSubsets(String,String,int) : void","category":"openclover-branch","ifCatch":true},{"nodeName":"statement-77-loadDictionaryWithSubsets(String,String,int) : void","category":"openclover-statement","ifCatch":false},{"nodeName":"statement-78-loadDictionaryWithSubsets(String,String,int) : void","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-79-loadDictionaryWithSubsets(String,String,int) : void","category":"openclover-statement","ifCatch":true},{"nodeName":"branch-37-loadDictionaryWithSubsets(String,String,int) : void","category":"openclover-branch","ifCatch":true},{"nodeName":"branch-38-loadDictionaryWithSubsets(String,String,int) : void","category":"openclover-branch","ifCatch":true},{"nodeName":"statement-80-loadDictionaryWithSubsets(String,String,int) : void","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-81-loadDictionaryWithSubsets(String,String,int) : void","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-82-loadDictionaryWithSubsets(String,String,int) : void","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-83-loadDictionaryWithSubsets(String,String,int) : void","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-84-loadDictionaryWithSubsets(String,String,int) : void","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-85-loadDictionaryWithSubsets(String,String,int) : void","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-86-loadDictionaryWithSubsets(String,String,int) : void","category":"openclover-statement","ifCatch":true},{"nodeName":"method-10-addWord(String) : boolean","category":"openclover-method","ifCatch":true},{"nodeName":"statement-87-addWord(String) : boolean","category":"openclover-statement","ifCatch":true},{"nodeName":"branch-39-addWord(String) : boolean","category":"openclover-branch","ifCatch":true},{"nodeName":"branch-40-addWord(String) : boolean","category":"openclover-branch","ifCatch":true},{"nodeName":"statement-88-addWord(String) : boolean","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-89-addWord(String) : boolean","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-90-addWord(String) : boolean","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-91-addWord(String) : boolean","category":"openclover-statement","ifCatch":true},{"nodeName":"branch-41-addWord(String) : boolean","category":"openclover-branch","ifCatch":true},{"nodeName":"branch-42-addWord(String) : boolean","category":"openclover-branch","ifCatch":true},{"nodeName":"statement-92-addWord(String) : boolean","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-93-addWord(String) : boolean","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-94-addWord(String) : boolean","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-95-addWord(String) : boolean","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-96-addWord(String) : boolean","category":"openclover-statement","ifCatch":true},{"nodeName":"method-11-findSingleWordAnagrams(String) : Set<String>","category":"openclover-method","ifCatch":true},{"nodeName":"statement-97-findSingleWordAnagrams(String) : Set<String>","category":"openclover-statement","ifCatch":true},{"nodeName":"branch-43-findSingleWordAnagrams(String) : Set<String>","category":"openclover-branch","ifCatch":true},{"nodeName":"branch-44-findSingleWordAnagrams(String) : Set<String>","category":"openclover-branch","ifCatch":true},{"nodeName":"statement-98-findSingleWordAnagrams(String) : Set<String>","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-99-findSingleWordAnagrams(String) : Set<String>","category":"openclover-statement","ifCatch":true},{"nodeName":"branch-45-findSingleWordAnagrams(String) : Set<String>","category":"openclover-branch","ifCatch":true},{"nodeName":"branch-46-findSingleWordAnagrams(String) : Set<String>","category":"openclover-branch","ifCatch":true},{"nodeName":"statement-100-findSingleWordAnagrams(String) : Set<String>","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-101-findSingleWordAnagrams(String) : Set<String>","category":"openclover-statement","ifCatch":true},{"nodeName":"method-12-getDictionaryKeyList() : List<String>","category":"openclover-method","ifCatch":true},{"nodeName":"branch-47-getDictionaryKeyList() : List<String>","category":"openclover-branch","ifCatch":true},{"nodeName":"branch-48-getDictionaryKeyList() : List<String>","category":"openclover-branch","ifCatch":false},{"nodeName":"statement-102-getDictionaryKeyList() : List<String>","category":"openclover-statement","ifCatch":true},{"nodeName":"method-13-isDictionaryLoaded() : boolean","category":"openclover-method","ifCatch":true},{"nodeName":"statement-103-isDictionaryLoaded() : boolean","category":"openclover-statement","ifCatch":true},{"nodeName":"method-14-toString() : String","category":"openclover-method","ifCatch":true},{"nodeName":"statement-104-toString() : String","category":"openclover-statement","ifCatch":true},{"nodeName":"method-15-sortWord(String) : String","category":"openclover-method","ifCatch":true},{"nodeName":"statement-105-sortWord(String) : String","category":"openclover-statement","ifCatch":true},{"nodeName":"branch-49-sortWord(String) : String","category":"openclover-branch","ifCatch":true},{"nodeName":"branch-50-sortWord(String) : String","category":"openclover-branch","ifCatch":true},{"nodeName":"statement-106-sortWord(String) : String","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-107-sortWord(String) : String","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-108-sortWord(String) : String","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-109-sortWord(String) : String","category":"openclover-statement","ifCatch":true},{"nodeName":"method-16-isSubset(char[],char[]) : boolean","category":"openclover-method","ifCatch":true},{"nodeName":"statement-110-isSubset(char[],char[]) : boolean","category":"openclover-statement","ifCatch":true},{"nodeName":"branch-51-isSubset(char[],char[]) : boolean","category":"openclover-branch","ifCatch":true},{"nodeName":"branch-52-isSubset(char[],char[]) : boolean","category":"openclover-branch","ifCatch":true},{"nodeName":"statement-111-isSubset(char[],char[]) : boolean","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-112-isSubset(char[],char[]) : boolean","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-113-isSubset(char[],char[]) : boolean","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-114-isSubset(char[],char[]) : boolean","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-115-isSubset(char[],char[]) : boolean","category":"openclover-statement","ifCatch":true},{"nodeName":"branch-53-isSubset(char[],char[]) : boolean","category":"openclover-branch","ifCatch":true},{"nodeName":"branch-54-isSubset(char[],char[]) : boolean","category":"openclover-branch","ifCatch":true},{"nodeName":"statement-116-isSubset(char[],char[]) : boolean","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-117-isSubset(char[],char[]) : boolean","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-118-isSubset(char[],char[]) : boolean","category":"openclover-statement","ifCatch":true},{"nodeName":"method-17-toList(char[]) : List<Character>","category":"openclover-method","ifCatch":true},{"nodeName":"branch-55-toList(char[]) : List<Character>","category":"openclover-branch","ifCatch":true},{"nodeName":"branch-56-toList(char[]) : List<Character>","category":"openclover-branch","ifCatch":true},{"nodeName":"statement-119-toList(char[]) : List<Character>","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-120-toList(char[]) : List<Character>","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-121-toList(char[]) : List<Character>","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-122-toList(char[]) : List<Character>","category":"openclover-statement","ifCatch":true},{"nodeName":"method-18-toCharArray(List<Character>) : char[]","category":"openclover-method","ifCatch":true},{"nodeName":"statement-123-toCharArray(List<Character>) : char[]","category":"openclover-statement","ifCatch":true},{"nodeName":"branch-57-toCharArray(List<Character>) : char[]","category":"openclover-branch","ifCatch":true},{"nodeName":"branch-58-toCharArray(List<Character>) : char[]","category":"openclover-branch","ifCatch":true},{"nodeName":"statement-124-toCharArray(List<Character>) : char[]","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-125-toCharArray(List<Character>) : char[]","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-126-toCharArray(List<Character>) : char[]","category":"openclover-statement","ifCatch":true},{"nodeName":"branch-59-toCharArray(List<Character>) : char[]","category":"openclover-branch","ifCatch":true},{"nodeName":"branch-60-toCharArray(List<Character>) : char[]","category":"openclover-branch","ifCatch":true},{"nodeName":"statement-127-toCharArray(List<Character>) : char[]","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-128-toCharArray(List<Character>) : char[]","category":"openclover-statement","ifCatch":true},{"nodeName":"method-19-isEquivalent(char[],char[]) : boolean","category":"openclover-method","ifCatch":true},{"nodeName":"statement-129-isEquivalent(char[],char[]) : boolean","category":"openclover-statement","ifCatch":true},{"nodeName":"branch-61-isEquivalent(char[],char[]) : boolean","category":"openclover-branch","ifCatch":true},{"nodeName":"branch-62-isEquivalent(char[],char[]) : boolean","category":"openclover-branch","ifCatch":true},{"nodeName":"statement-130-isEquivalent(char[],char[]) : boolean","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-131-isEquivalent(char[],char[]) : boolean","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-132-isEquivalent(char[],char[]) : boolean","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-133-isEquivalent(char[],char[]) : boolean","category":"openclover-statement","ifCatch":true},{"nodeName":"branch-63-isEquivalent(char[],char[]) : boolean","category":"openclover-branch","ifCatch":true},{"nodeName":"branch-64-isEquivalent(char[],char[]) : boolean","category":"openclover-branch","ifCatch":true},{"nodeName":"statement-134-isEquivalent(char[],char[]) : boolean","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-135-isEquivalent(char[],char[]) : boolean","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-136-isEquivalent(char[],char[]) : boolean","category":"openclover-statement","ifCatch":true},{"nodeName":"branch-65-isEquivalent(char[],char[]) : boolean","category":"openclover-branch","ifCatch":true},{"nodeName":"branch-66-isEquivalent(char[],char[]) : boolean","category":"openclover-branch","ifCatch":true},{"nodeName":"statement-137-isEquivalent(char[],char[]) : boolean","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-138-isEquivalent(char[],char[]) : boolean","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-139-isEquivalent(char[],char[]) : boolean","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-140-isEquivalent(char[],char[]) : boolean","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-141-isEquivalent(char[],char[]) : boolean","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-142-isEquivalent(char[],char[]) : boolean","category":"openclover-statement","ifCatch":true},{"nodeName":"method-20-setDifference(char[],char[]) : char[]","category":"openclover-method","ifCatch":true},{"nodeName":"statement-143-setDifference(char[],char[]) : char[]","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-144-setDifference(char[],char[]) : char[]","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-145-setDifference(char[],char[]) : char[]","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-146-setDifference(char[],char[]) : char[]","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-147-setDifference(char[],char[]) : char[]","category":"openclover-statement","ifCatch":true},{"nodeName":"method-21-setMultiplication(Set<String>) : Set<Set<String>>","category":"openclover-method","ifCatch":true},{"nodeName":"statement-148-setMultiplication(Set<String>) : Set<Set<String>>","category":"openclover-statement","ifCatch":true},{"nodeName":"branch-67-setMultiplication(Set<String>) : Set<Set<String>>","category":"openclover-branch","ifCatch":true},{"nodeName":"branch-68-setMultiplication(Set<String>) : Set<Set<String>>","category":"openclover-branch","ifCatch":true},{"nodeName":"statement-149-setMultiplication(Set<String>) : Set<Set<String>>","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-150-setMultiplication(Set<String>) : Set<Set<String>>","category":"openclover-statement","ifCatch":true},{"nodeName":"method-22-setMultiplication(int,Set<String>) : Set<Set<String>>","category":"openclover-method","ifCatch":true},{"nodeName":"statement-151-setMultiplication(int,Set<String>) : Set<Set<String>>","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-152-setMultiplication(int,Set<String>) : Set<Set<String>>","category":"openclover-statement","ifCatch":true},{"nodeName":"branch-69-setMultiplication(int,Set<String>) : Set<Set<String>>","category":"openclover-branch","ifCatch":true},{"nodeName":"branch-70-setMultiplication(int,Set<String>) : Set<Set<String>>","category":"openclover-branch","ifCatch":true},{"nodeName":"statement-153-setMultiplication(int,Set<String>) : Set<Set<String>>","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-154-setMultiplication(int,Set<String>) : Set<Set<String>>","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-155-setMultiplication(int,Set<String>) : Set<Set<String>>","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-156-setMultiplication(int,Set<String>) : Set<Set<String>>","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-157-setMultiplication(int,Set<String>) : Set<Set<String>>","category":"openclover-statement","ifCatch":true},{"nodeName":"statement-158-setMultiplication(int,Set<String>) : Set<Set<String>>","category":"openclover-statement","ifCatch":true}]