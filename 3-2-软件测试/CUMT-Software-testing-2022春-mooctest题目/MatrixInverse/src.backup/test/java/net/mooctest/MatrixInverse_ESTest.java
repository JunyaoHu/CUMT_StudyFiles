///*
// * This file was automatically generated by EvoSuite
// * Tue Jun 07 05:54:36 GMT 2022
// */
//
//package net.mooctest;
//
//import org.junit.Test;
//import static org.junit.Assert.*;
//import static org.evosuite.runtime.EvoAssertions.*;
//import net.mooctest.MatrixInverse;
//import org.evosuite.runtime.EvoRunner;
//import org.evosuite.runtime.EvoRunnerParameters;
//import org.junit.runner.RunWith;
//
//@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
//public class MatrixInverse_ESTest extends MatrixInverse_ESTest_scaffolding {
//
//  @Test(timeout = 4000)
//  public void test00()  throws Throwable  {
//      double[][] doubleArray0 = new double[2][7];
//      double[] doubleArray1 = new double[2];
//      doubleArray1[1] = (-1473.139960043111);
//      doubleArray0[0] = doubleArray1;
//      doubleArray0[1] = doubleArray1;
//      boolean boolean0 = MatrixInverse.hasMultipleSolutions(doubleArray0);
//      assertEquals(2, doubleArray0.length);
//      assertFalse(boolean0);
//  }
//
//  @Test(timeout = 4000)
//  public void test01()  throws Throwable  {
//      double[][] doubleArray0 = new double[2][3];
//      double[] doubleArray1 = new double[1];
//      doubleArray1[0] = 1.0E-8;
//      doubleArray0[0] = doubleArray1;
//      boolean boolean0 = MatrixInverse.hasMultipleSolutions(doubleArray0);
//      assertEquals(2, doubleArray0.length);
//      assertFalse(boolean0);
//  }
//
//  @Test(timeout = 4000)
//  public void test02()  throws Throwable  {
//      double[][] doubleArray0 = new double[7][5];
//      double[] doubleArray1 = new double[4];
//      doubleArray1[0] = 1.0E-8;
//      doubleArray1[3] = 3043.272858828877;
//      doubleArray0[0] = doubleArray1;
//      boolean boolean0 = MatrixInverse.isInconsistent(doubleArray0);
//      assertEquals(7, doubleArray0.length);
//      assertTrue(boolean0);
//  }
//
//  @Test(timeout = 4000)
//  public void test03()  throws Throwable  {
//      double[][] doubleArray0 = new double[4][0];
//      double[] doubleArray1 = new double[3];
//      doubleArray1[2] = 1.0E-8;
//      doubleArray0[0] = doubleArray1;
//      // Undeclared exception!
//      try { 
//        MatrixInverse.isInconsistent(doubleArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
//      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("net.mooctest.MatrixInverse", e);
//      }
//  }
//
//  @Test(timeout = 4000)
//  public void test04()  throws Throwable  {
//      double[][] doubleArray0 = new double[2][3];
//      double[] doubleArray1 = new double[1];
//      doubleArray1[0] = 1.0E-8;
//      doubleArray0[0] = doubleArray1;
//      MatrixInverse.solve(doubleArray0);
//      assertEquals(2, doubleArray0.length);
//  }
//
//  @Test(timeout = 4000)
//  public void test05()  throws Throwable  {
//      double[][] doubleArray0 = new double[6][9];
//      double[] doubleArray1 = new double[6];
//      doubleArray0[0] = doubleArray1;
//      double[][] doubleArray2 = MatrixInverse.inverse(doubleArray0);
//      assertNotSame(doubleArray0, doubleArray2);
//      assertNotSame(doubleArray2, doubleArray0);
//      assertEquals(6, doubleArray0.length);
//      assertEquals(6, doubleArray2.length);
//      assertFalse(doubleArray2.equals((Object)doubleArray0));
//      assertNotNull(doubleArray2);
//  }
//
//  @Test(timeout = 4000)
//  public void test06()  throws Throwable  {
//      double[][] doubleArray0 = new double[1][8];
//      double[][] doubleArray1 = MatrixInverse.inverse(doubleArray0);
//      assertEquals(1, doubleArray0.length);
//      assertNull(doubleArray1);
//  }
//
//  @Test(timeout = 4000)
//  public void test07()  throws Throwable  {
//      // Undeclared exception!
//      try { 
//        MatrixInverse.solve((double[][]) null);
//        fail("Expecting exception: NullPointerException");
//      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("net.mooctest.MatrixInverse", e);
//      }
//  }
//
//  @Test(timeout = 4000)
//  public void test08()  throws Throwable  {
//      double[][] doubleArray0 = new double[9][4];
//      double[] doubleArray1 = new double[8];
//      doubleArray0[0] = doubleArray1;
//      // Undeclared exception!
//      try { 
//        MatrixInverse.solve(doubleArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
//      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 4
//         //
//         verifyException("net.mooctest.MatrixInverse", e);
//      }
//  }
//
//  @Test(timeout = 4000)
//  public void test09()  throws Throwable  {
//      // Undeclared exception!
//      try { 
//        MatrixInverse.isInconsistent((double[][]) null);
//        fail("Expecting exception: NullPointerException");
//      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("net.mooctest.MatrixInverse", e);
//      }
//  }
//
//  @Test(timeout = 4000)
//  public void test10()  throws Throwable  {
//      double[][] doubleArray0 = new double[6][3];
//      double[] doubleArray1 = new double[1];
//      doubleArray0[5] = doubleArray1;
//      // Undeclared exception!
//      try { 
//        MatrixInverse.isInconsistent(doubleArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
//      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 2
//         //
//         verifyException("net.mooctest.MatrixInverse", e);
//      }
//  }
//
//  @Test(timeout = 4000)
//  public void test11()  throws Throwable  {
//      // Undeclared exception!
//      try { 
//        MatrixInverse.inverse((double[][]) null);
//        fail("Expecting exception: NullPointerException");
//      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("net.mooctest.MatrixInverse", e);
//      }
//  }
//
//  @Test(timeout = 4000)
//  public void test12()  throws Throwable  {
//      double[][] doubleArray0 = new double[0][3];
//      // Undeclared exception!
//      try { 
//        MatrixInverse.inverse(doubleArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
//      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 0
//         //
//         verifyException("net.mooctest.MatrixInverse", e);
//      }
//  }
//
//  @Test(timeout = 4000)
//  public void test13()  throws Throwable  {
//      // Undeclared exception!
//      try { 
//        MatrixInverse.hasMultipleSolutions((double[][]) null);
//        fail("Expecting exception: NullPointerException");
//      
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("net.mooctest.MatrixInverse", e);
//      }
//  }
//
//  @Test(timeout = 4000)
//  public void test14()  throws Throwable  {
//      double[][] doubleArray0 = new double[3][3];
//      double[] doubleArray1 = new double[6];
//      doubleArray0[0] = doubleArray1;
//      // Undeclared exception!
//      try { 
//        MatrixInverse.hasMultipleSolutions(doubleArray0);
//        fail("Expecting exception: ArrayIndexOutOfBoundsException");
//      
//      } catch(ArrayIndexOutOfBoundsException e) {
//         //
//         // 3
//         //
//         verifyException("net.mooctest.MatrixInverse", e);
//      }
//  }
//
//  @Test(timeout = 4000)
//  public void test15()  throws Throwable  {
//      double[][] doubleArray0 = new double[2][7];
//      boolean boolean0 = MatrixInverse.hasMultipleSolutions(doubleArray0);
//      assertTrue(boolean0);
//  }
//
//  @Test(timeout = 4000)
//  public void test16()  throws Throwable  {
//      double[][] doubleArray0 = new double[2][7];
//      double[] doubleArray1 = new double[2];
//      doubleArray1[1] = (-1473.139960043111);
//      doubleArray0[0] = doubleArray1;
//      doubleArray0[1] = doubleArray1;
//      double[][] doubleArray2 = MatrixInverse.inverse(doubleArray0);
//      double[][] doubleArray3 = MatrixInverse.inverse(doubleArray2);
//      assertEquals(2, doubleArray3.length);
//      
//      boolean boolean0 = MatrixInverse.isInconsistent(doubleArray3);
//      assertFalse(boolean0);
//  }
//
//  @Test(timeout = 4000)
//  public void test17()  throws Throwable  {
//      double[][] doubleArray0 = new double[2][7];
//      MatrixInverse.solve(doubleArray0);
//      assertEquals(2, doubleArray0.length);
//  }
//
//  @Test(timeout = 4000)
//  public void test18()  throws Throwable  {
//      double[][] doubleArray0 = new double[4][2];
//      double[][] doubleArray1 = MatrixInverse.inverse(doubleArray0);
//      assertNull(doubleArray1);
//  }
//
//  @Test(timeout = 4000)
//  public void test19()  throws Throwable  {
//      MatrixInverse matrixInverse0 = new MatrixInverse();
//  }
//}
